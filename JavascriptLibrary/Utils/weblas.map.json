{"version":3,"sources":["../../../../../usr/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","lib/pipeline.js","lib/globals.js","lib/test.js","lib/tensor.js","node_modules/floader/lib/xhr-loader.js","node_modules/async/lib/async.js","lib/saxpycalculator.js","lib/sscalcalculator.js","lib/sclmpcalculator.js","lib/sdwnscalculator.js","lib/sgemmcalculator.js","lib/webgl.js","../../../../../usr/lib/node_modules/browserify/node_modules/process/browser.js"],"names":["sgemm","M","N","K","alpha","A","B","beta","C","length","Error","texels1","texels0","texels2","transpose","texture0","gl","createDataTexture","texture1","texture2","texture3","createOutputTexture","sgemmcalculator","calculate","rawBuffer","readData","context","deleteTexture","Float32Array","saxpy","a","X","Y","isFloat32Array","fill","saxpycalculator","obj","Object","prototype","toString","call","sscal","b","sscalcalculator","sstd","mu","sigma","sdwns","channels","factor","stride","N_out","Math","floor","M_out","sdwnscalculator","sclmp","Number","MIN_VALUE","MAX_VALUE","sclmpcalculator","isNumeric","parseFloat","fromArray","array","type","tranpose","data","c","shape","ii","jj","r","typedArray","result","constructor","i","j","globals","require","pipeline","SGEMMCalculator","SAXPYCalculator","SSCALCalculator","SDWNSCalculator","SCLMPCalculator","test","module","exports","gpu","bind","encode","util","String","format","args","arguments","this","replace","match","number","t0","tOut","Tensor","texture","t1","t2","WebGL","async","loader","allclose","RTOL","ATOL","console","log","index","abs","randomArray","row","random","sqrt","push","padData","pad","padded","set","slice","load","testDirectory","matrixFiles","callback","testFiles","map","item","err","results","matrices","JSON","parse","assert","t","msg","ok","actual","expected","_assert","message","operator","extra","transfer","keep","out","reshape","tT","url","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","errno","open","send","noop","identity","v","toBool","notId","only_once","fn","apply","_once","_isArrayLike","arr","_isArray","_arrayEach","iterator","_map","Array","_range","count","_reduce","memo","x","_forEachOf","object","_keys","key","_indexOf","_keyIterator","coll","len","keys","_restParam","func","startIndex","max","rest","_withoutIndex","value","_eachOfLimit","limit","nextKey","done","running","errored","replenish","doParallel","eachOf","doParallelLimit","doSeries","eachOfSeries","_asyncMap","eachfn","_filter","sort","_reject","cb","_createTester","check","getResult","iteratee","_","_findGetResult","_parallel","tasks","task","_concat","y","concat","_queue","worker","concurrency","payload","_insert","q","pos","started","idle","setImmediate","drain","unshift","saturated","process","_next","workers","removed","workersList","splice","empty","paused","kill","pause","resume","resumeCount","min","w","_console_fn","name","error","_times","mapper","_applyEach","fns","go","that","pop","ensureAsync","innerArgs","sync","previous_async","root","self","global","noConflict","_toString","isArray","_isObject","k","hasOwnProperty","_setImmediate","_delay","setTimeout","nextTick","forEach","each","forEachSeries","eachSeries","forEachLimit","eachLimit","forEachOf","completed","iter","forEachOfSeries","iterate","forEachOfLimit","eachOfLimit","mapSeries","mapLimit","inject","foldl","reduce","foldr","reduceRight","reversed","reverse","transform","select","filter","selectLimit","filterLimit","selectSeries","filterSeries","reject","rejectLimit","rejectSeries","any","some","someLimit","all","every","everyLimit","detect","detectSeries","detectLimit","sortBy","comparator","left","right","criteria","auto","addListener","listeners","removeListener","idx","taskComplete","remainingTasks","runningTasks","ready","requires","listener","taskCallback","dep","safeResults","val","rkey","retry","times","parseTimes","acc","parseInt","DEFAULT_TIMES","interval","DEFAULT_INTERVAL","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","retryInterval","opts","attempts","series","waterfall","wrapIterator","next","parallel","parallelLimit","makeCallback","callArgs","concatSeries","whilst","doWhilst","calls","until","doUntil","during","truth","doDuring","queue","items","priorityQueue","_compareTasks","priority","_binarySearch","sequence","compare","beg","end","mid","cargo","dir","memoize","hasher","queues","memoized","l","unmemoized","unmemoize","timesSeries","timesLimit","seq","newargs","nextargs","compose","applyEach","applyEachSeries","forever","constant","values","wrapSync","asyncify","e","then","define","amd","webgl","standalone","s","program","createProgram","p","TEXTURE_UNIFORM_NAME_0","TEXTURE_UNIFORM_NAME_1","LENGTH_UNIFORM_NAME","COEFFICIENT_UNIFORM_NAME","selectProgram","bindInputTexture","TEXTURE0","TEXTURE1","getPad","bindUniforms","bindOutputTexture","drawElements","TRIANGLES","UNSIGNED_SHORT","unbindInputTexture","textureUnit","activeTexture","bindTexture","TEXTURE_2D","sampler","getUniformLocation","uniform1i","N_gl","a_gl","uniform1f","ADD_UNIFORM_NAME","MUL_UNIFORM_NAME","mod","COMPONENTS_PER_TEXEL","b_gl","pad_gl","LOWER_UNIFORM_NAME","UPPER_UNIFORM_NAME","nPad","DownsampleCalculator","INPUT_ROW_COUNT_UNIFORM_NAME","INPUT_COLUMN_COUNT_UNIFORM_NAME","OUTPUT_ROW_COUNT_UNIFORM_NAME","OUTPUT_COLUMN_COUNT_UNIFORM_NAME","FACTOR_UNIFORM_NAME","STRIDE_UNIFORM_NAME","CHANNEL_COUNT_UNIFORM_NAME","M_gl","M_out_gl","N_out_gl","factor_gl","stride_gl","channel_count_gl","s_c","p_c","program_","program_c","TEXTURE_UNIFORM_NAME_2","SHARED_LENGTH_UNIFORM_NAME","COLUMN_COUNT_UNIFORM_NAME","PAD_UNIFORM_NAME","ALPHA_UNIFORM_NAME","BETA_UNIFORM_NAME","TEXTURE2","kPad","K_gl","alpha_gl","beta_gl","options","glOptions","ext","canvas","document","createElement","premultipliedAlpha","preserveDrawingBuffer","getContext","getExtension","hasFloat","highp","getShaderPrecisionFormat","FRAGMENT_SHADER","HIGH_FLOAT","hasHighPrecision","precision","passThrough","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","encode_program","transpose_program","POSITION_UNIFORM_NAME","TEXTURE_UNIFORM_NAME","npad","mpad","npad_gl","mpad_gl","fragmentShaderSource","fragmentShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","useProgram","bindVertices","renderer","position","getAttribLocation","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","texCoords","textureCoords","indices","ELEMENT_ARRAY_BUFFER","vertexIndices","Uint16Array","h","texels","PAD_VALUE","rem","createTexture","texImage2D","RGBA","remainder","full_texel_row_len","full_row_texture_width","row_start","last_texel","full_texel_row_end","buffer","BYTES_PER_ELEMENT","texSubImage2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","destTexture","UNSIGNED_BYTE","height","width","viewport","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","rawbuffer","ArrayBuffer","prod","Uint8Array","readPixels","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","run","clearTimeout","Item","fun","title","browser","env","argv","version","versions","on","once","off","removeAllListeners","emit","binding","cwd","chdir","umask"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var globals = require('./lib/globals'),\n\tpipeline = require(\"./lib/pipeline\"),\n\tSGEMMCalculator = require(\"./lib/sgemmcalculator\"),\n\tSAXPYCalculator = require(\"./lib/saxpycalculator\"),\n\tSSCALCalculator = require(\"./lib/sscalcalculator\"),\n\tSDWNSCalculator = require(\"./lib/sdwnscalculator\"),\n\tSCLMPCalculator = require(\"./lib/sclmpcalculator\"),\n\ttest = require(\"./lib/test\");\n\nvar gl = globals.gl,\n\tsgemmcalculator = new SGEMMCalculator(gl),\n\tsaxpycalculator = new SAXPYCalculator(gl),\n\tsscalcalculator = new SSCALCalculator(gl),\n\tsdwnscalculator = new SDWNSCalculator(gl),\n\tsclmpcalculator = new SCLMPCalculator(gl);\n\nmodule.exports = {\n\t// level one\n\t\"saxpy\" : saxpy,\n\t\"sscal\" : sscal,   // single precision matrix scale\n\t// level two\n\t// level three\n\t\"sgemm\" : sgemm,   // single precision generalized matrix multiply\n\t// extra\n\t\"sstd\" : sstd,     // single precision Standard Score normalization\n\t\"sdwns\": sdwns,\n\t\"sclmp\": sclmp,\n\t// pipeline\n\t\"pipeline\" : pipeline,\n\t// internals\n\t\"gpu\" : {\t\"gl\": gl,\n\t \t\t\t\"sgemm\": pipeline.sgemmcalculator.calculate.bind(pipeline.sgemmcalculator),\n\t\t\t\t\"sscal\" : pipeline.sscalcalculator.calculate.bind(pipeline.sscalcalculator),\n\t\t\t\t\"sclmp\" : pipeline.sclmpcalculator.calculate.bind(pipeline.sclmpcalculator),\n\t\t\t\t\"sdwns\" : pipeline.sdwnscalculator.calculate.bind(pipeline.sdwnscalculator),\n\t\t\t\t\"encode\" : gl.encode.bind(gl)\n\t\t\t},\n\t\"util\" : { \"fromArray\" : fromArray, \"transpose\" : transpose},\n\t\"test\" : test\n};\n\n\n/* Wrap the GL calculation object in a (relatively) user friendly function that\n\taccepts TypedArrays\n\n\t* convert the data to (padded) textures in GPU memory\n\t* execute calculation\n\t* read result into an array, and return\n */\nfunction sgemm(M, N, K, alpha, A, B, beta, C){\n\n\tif(C != null && C.length != N){\n\t\tthrow new Error(\"Only vector C with length matching rows in A is currently supported.\");\n\t}\n\n\t// pack each matrix into a single RGBA texel array, with the second transposed\n\tvar texels0 = A,\n\t\ttexels1,\n\t\ttexels2 = C;\n\n\n\ttexels1 = transpose(K, N, B);\n\n\t// create input textures from data\n\tvar texture0 = gl.createDataTexture(M, K, texels0);\n\tvar texture1 = gl.createDataTexture(N, K, texels1);\n\tvar texture2 = null;\n\tif(texels2 != null){\n\t\ttexture2 = gl.createDataTexture(1, N, texels2);\n\t}\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\tsgemmcalculator.calculate(M, N, K, alpha, texture0, texture1, beta, texture2, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture1);\n\tif(texture2 != null){\n\t\tgl.context.deleteTexture(texture2);\n\t}\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n\n}\n\nfunction saxpy(N, a, X, Y){\n\n\tvar rawBuffer;\n\n\n\tvar texels0 = X,\n\t\ttexels1;\n\n\t// TODO: special shader for constant Y\n\tif(isFloat32Array(Y)){\n\t\ttexels1 = Y;\n\t} else {\n\t\ttexels1 = new Float32Array(N);\n\t\ttexels1.fill(Y);\n\t}\n\n\t// create input textures from data\n\tvar texture0 = gl.createDataTexture(1, N, texels0);\n\tvar texture1 = gl.createDataTexture(1, N, texels1);\n\n\tvar texture3 = gl.createOutputTexture(1, N);\n\n\tsaxpycalculator.calculate(N, a, texture0, texture1, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(1, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture1);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n\n}\n\nfunction isFloat32Array(obj){\n\treturn Object.prototype.toString.call(obj) === \"[object Float32Array]\";\n}\n/* a more general version of the BLAS Level 1 scale, that works on matrices\n   and includes an elementwise scalar addition\n\n   a * X + b\n\n   a - multiplicative scalar\n   b - additive scalar\n   X - matrix (M x N)\n\n   to get the standard BLAS scal set M = 1 and b = 0\n\n   this function is generally only cost effective to use in a pipeline\n*/\nfunction sscal(M, N, a, b, X){\n\n\tvar rawBuffer;\n\n\tvar texels0 = X;\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\tsscalcalculator.calculate(M, N, a, b, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n\n/* Calculate the Standard Score normalization (subtract mean\n   ,divide by standard deviation).\n */\nfunction sstd(M, N, mu, sigma, X){\n\n\tvar rawBuffer;\n\n\tvar texels0 = X;\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\t// adjust the parameters (for inverse) and call the standard score normalization\n\tsscalcalculator.calculate(M, N, 1.0/sigma, -1.0 * mu/sigma, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n\n/* downsample an image (taking the max) for Pooling\n\n\tM - rows in input\n\tN - columns in input\n\tc - channels in input\n\tfactor - the downsample factor (width of patch to sample)\n\tstride - width between pooling regions\n\tX - input image\n */\nfunction sdwns(M, N, channels, factor, stride, X){\n\n\n\tvar texels0 = X;\n\n\tvar texture0 = gl.createDataTexture(M, N * channels, X);\n\n\tvar N_out = Math.floor((N - factor) / stride) + 1;\n\tvar M_out = Math.floor((M - factor) / stride) + 1;\n\n\tvar texture3 = gl.createOutputTexture(M_out, N_out * channels);\n\n\tsdwnscalculator.calculate(M, N, channels, factor, stride, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M_out, N_out * channels);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n/*  Elementwise clamp function for matrices on the interval [a, b]. Can also be\n\tused for min or max, by passing Number.MIN_VALUE for the first parameter and\n\tNumber.MAX_VALUE for the second parameter, respectively.\n\n\tPassing `null` for either of these parameters will default to it's\n\trespective min or max value.\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - lower bound (inclusize)\n\tb - upper bound (inclusive)\n\tX - matrix\n\n   to get the standard BLAS scal set M = 1 and b = 0\n\n   this function is generally only cost effective to use in a pipeline\n*/\nfunction sclmp(M, N, a, b, X){\n\n\ta = (a != null) ? a : Number.MIN_VALUE;\n\tb = (b != null) ? b : Number.MAX_VALUE;\n\n\tvar rawBuffer;\n\n\tvar texels0 = X;\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\n\n\tvar texture3 = gl.createOutputTexture(M, N);\n\n\tsclmpcalculator.calculate(M, N, a, b, texture0, texture3);\n\n\t// retrieve data\n\trawBuffer = gl.readData(M, N);\n\n\t// clean up\n\tgl.context.deleteTexture(texture0);\n\tgl.context.deleteTexture(texture3);\n\n\t// return result\n\treturn new Float32Array(rawBuffer);\n}\n/*\nfunction saxpy(n, a, x, y){\n\tvar i = 0,\n\t\tresult = new Float32Array(n);\n\n\t// assert n = x.length\n\t// assert a is scalar\n\t// assert x is Float32Array\n\n\tif(isNumeric(y)){\n\t\t// shortcut for scalar y\n\t\tfor(; i < n; i++){\n\t\t\tresult[i] = a * x[i] + y;\n\t\t}\n\t} else {\n\n\t\tfor(; i < n; i++){\n\t\t\tresult[i] = a * x[i] + y[i];\n\t\t}\n\t}\n\n\treturn result;\n\n}*/\n\n// add a String.format method, if none exists\nif (!String.prototype.format) {\n  String.prototype.format = function() {\n\tvar args = arguments;\n\treturn this.replace(/{(\\d+)}/g, function(match, number) {\n\t  return typeof args[number] != 'undefined'\n\t\t? args[number]\n\t\t: match\n\t  ;\n\t});\n  };\n}\n\nfunction isNumeric( obj ) { return (obj - parseFloat( obj ) + 1) >= 0; }\n\n/* create a typed array from a 2D javascript array */\nfunction fromArray(array, type, tranpose) {\n\tvar shape = [],\n\t\t\tdata,\n\t\t\tc;   // number of columns\n\n\tif(!tranpose){\n\t\tshape[0] = array.length;\n\t\tshape[1] = array[0].length;\n\t} else {\n\t\tshape[1] = array.length;\n\t\tshape[0] = array[0].length;\n\t}\n\tc = shape[1];\n\n\ttype = type || Float32Array;\n\n\tdata = new type(shape[0]*shape[1]);\n\n\tfor (var ii = 0; ii < shape[0]; ++ii)\n\t\tfor (var jj = 0; jj < shape[1]; ++jj)\n\t\tif(!tranpose)\n\t\t\tdata[ii*c + jj] = array[ii][jj];\n\t\telse\n\t\t\tdata[ii*c + jj] = array[jj][ii];\n\n\treturn data;\n};\n\n// tranpose a typed array in row major order, with the given row and column\n// numers\nfunction transpose(r, c, typedArray){\n\tvar result = new typedArray.constructor(r*c);\n\n\tfor(var i = 0; i < r; i++){\n\t\tfor(var j = 0; j < c; j++){\n\t\t\tresult[j * r + i] = typedArray[i * c + j];\n\t\t}\n\t}\n\n\treturn result;\n}\n","var globals = require('./globals'),\n\tSGEMMCalculator = require(\"./sgemmcalculator\"),\n\tSAXPYCalculator = require(\"./saxpycalculator\"),\n\tSSCALCalculator = require(\"./sscalcalculator\"),\n\tSDWNSCalculator = require(\"./sdwnscalculator\"),\n\tSCLMPCalculator = require(\"./sclmpcalculator\"),\n\tTensor = require('./tensor');\n\n\nvar gl = globals.gl,\n\tsgemmcalculator = new SGEMMCalculator(gl, false),\n\tsaxpycalculator = new SAXPYCalculator(gl, false),\n\tsscalcalculator = new SSCALCalculator(gl, false),\n\tsdwnscalculator = new SDWNSCalculator(gl, false),\n\tsclmpcalculator = new SCLMPCalculator(gl, false);\n\nmodule.exports = {\n\t\"Tensor\" : Tensor,\n\t\"sscal\" : sscal,\n\t\"sgemm\" : sgemm,\n\t\"sdwns\" : sdwns,\n\t\"sclmp\" : sclmp,\n\n\t\"sgemmcalculator\" : sgemmcalculator,\n\t\"saxpycalculator\" : saxpycalculator,\n\t\"sscalcalculator\" : sscalcalculator,\n\t\"sdwnscalculator\" : sdwnscalculator,\n\t\"sclmpcalculator\" : sclmpcalculator\n}\n\n/* scale (and optionally offset) a Tensor, elementwise\n */\nfunction sscal(a, b, t0){\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1];\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M, N], null);\n\n\tsscalcalculator.calculate(M, N, a, b, t0.texture, tOut.texture);\n\n\treturn tOut;\n}\n\n/* matrix multiply on t0 and t1 with additive t2. t1 must be tranposed\n */\nfunction sgemm(alpha, t0, t1, beta, t2){\n\n\tif(t1.shape[1] !== t0.shape[1])\n\t\tthrow new Error(\"Second dimension must be of same size for input Tensors (second Tensor is tranposed).\");\n\n\tvar M = t0.shape[0],\n\t\tN = t1.shape[0],\n\t\tK = t0.shape[1];\n\n\tvar texture2;\n\n\tif(t2){\n\t\ttexture2 = t2.texture;\n\t} else {\n\t\ttexture2 = null;\n\t}\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M, N], null);\n\n\tsgemmcalculator.calculate(M, N, K, alpha, t0.texture, t1.texture, beta, texture2, tOut.texture);\n\n\treturn tOut;\n}\n\nfunction sdwns(channels, factor, stride, t0){\n\n\tif(t0.shape[1] % channels !== 0)\n\t\tthrow new Error(\"Second dimension of tensor must be a multiple of channels\");\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1] / channels;\n\n\tvar M_out = Math.floor((M - factor) / stride) + 1;\n\tvar N_out = Math.floor((N - factor) / stride) + 1;\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M_out, N_out * channels], null);\n\n\tsdwnscalculator.calculate(M, N, channels, factor, stride, t0.texture, tOut.texture);\n\n\treturn tOut;\n}\n\nfunction sclmp(a, b, t0){\n\n\ta = (a != null) ? a : Number.MIN_VALUE;\n\tb = (b != null) ? b : Number.MAX_VALUE;\n\n\tvar M = t0.shape[0],\n\t\tN = t0.shape[1];\n\n\t// create an empty output Tensor\n\tvar tOut = new Tensor([M, N], null);\n\n\tsclmpcalculator.calculate(M, N, a, b, t0.texture, tOut.texture);\n\n\treturn tOut;\n}\n","var WebGL = require(\"./webgl\");\n\nvar gl = new WebGL();\n\nmodule.exports = {\n\t\"gl\" : gl\n}\n","var async = require('async'),\n\tloader = require('floader'); // browserify aware file loader (xhr in browser)\n\n/* Collection of helper methods for testing numerical computation\n */\ntest = {};\n\n/* Check all entries in two TypedArrays of identical length for approximate\n\tequality.\n\tIf the following equation is element-wise true, returns true\n\n\tabsolute(a - b) <= (atol + rtol * absolute(b))\n\n\tfrom numpy.allclose\n */\ntest.allclose = function(a, b, RTOL, ATOL){\n\tRTOL= RTOL || 1e-05;  // for 32 bit precision: 1e-06\n\tATOL= ATOL || 1e-08;\n\n\tif(a.length != b.length){\n\t\tconsole.log(\"lengths not equal: \" + a.length + \", \" + b.length);\n\t\treturn {\"result\" : false, \"index\": null};\n\t}\n\n\tvar result;\n\tfor(var i = 0; i < a.length; i++){\n\n\t\tresult = Math.abs(a[i] - b[i]) <= ATOL + RTOL * Math.abs(b[i]);\n\n\t\tif(!result) {\n\t\t\treturn {\"result\": false, \"index\": i};\n\t\t}\n\t}\n\n\treturn {\"result\": true, \"index\": i};\n};\n\ntest.randomArray = function(N, M){\n\n\tvar data = [];\n\n\tfor(var i = 0; i < N; i++){\n\t\tvar row = [];\n\t\tfor(var j = 0; j < M; j++){\n\t\t\trow[j] = Math.random() / Math.sqrt(N);\n\t\t}\n\t\tdata.push(row);\n\t}\n\n\treturn data;\n};\n// pad rows with zeros\ntest.padData = function(M, N, pad, data){\n\n\tvar padded = new Float32Array(M * (N + pad)); // new array of specified length filled with zeros\n\tfor(var i = 0; i < M; i++){\n\t\tpadded.set(data.slice(i * N, (i + 1) * N), i * (N + pad));\n\t}\n\treturn padded;\n}\n\n\n/* Load test matrices from JSON data, works in a browser (with XHR)\n\tassumes three files 'a.json', 'b.json' and 'c.json' in nested Array format.\n\n callback = function(err, a, b, c)\n */\ntest.load = function(testDirectory, matrixFiles, callback){\n\n\t// array of paths to matrix data files for current test\n\tvar testFiles = matrixFiles.map(function(item){ return testDirectory + item;});\n\n\t//console.log(testFiles);\n\tasync.map(testFiles, loader.load,\n\t\tfunction(err, results){\n\n\t\t\tif(err) return callback(err);\n\n\t\t\t// results contains three strings.\n\t\t\t// each string contains the contents of a file\n\t\t\t// files contain JSON describing a matrix (2D array)\n\t\t\tvar matrices = results.map(JSON.parse);\n\n\t\t\tcallback(err, matrices);\n\t\t}\n\t);\n};\n\ntest.assert = {};\n\n/* create a tape compatible assert */\ntest.assert.allclose = function(t, a, b, msg, RTOL, ATOL) {\n\n\tvar ok = test.allclose(a, b, RTOL, ATOL),\n\t\tactual = \"[\",\n\t\texpected = \"[\";\n\n\tif(!ok.result){\n\n\t\tif(ok.index > 1){\n\t\t\tactual += \"..., \";\n\t\t\texpected += \"..., \";\n\t\t}\n\t\tif(ok.index > 0){\n\t\t\tactual += a[ok.index - 1] + \", \";\n\t\t\texpected += b[ok.index - 1] + \", \";\n\t\t}\n\t\tactual += \"-->\";\n\t\texpected += \"-->\";\n\n\t\tfor(var i = ok.index; i < ok.index + 4 && i < a.length; i++ ){\n\t\t\tactual += a[i] + \", \";\n\t\t\texpected += b[i] + \", \";\n\t\t}\n\t\tif(i < a.length){\n\t\t\tactual += \"...]\";\n\t\t\texpected += \"...]\";\n\t\t} else {\n\t\t\tactual += \"]\";\n\t\t\texpected += \"]\";\n\t\t}\n\t\tmsg = msg || 'should be allclose at ' + ok.index;\n\t}\n\n    t._assert(ok.result, {\n        message : msg || 'should be allclose',\n        operator : 'allclose',\n        actual : actual,\n        expected : expected,\n        extra : null\n    });\n}\n\nmodule.exports = test;\n","var globals = require(\"./globals\");\n\nvar gl = globals.gl;\n\nfunction Tensor(shape, data){\n\tif(shape.length != 2)\n\t\tthrow new Error(\"Only Tensor of order two (matrix) is supported right now.\");\n\n\tvar M = shape[0],\n\t\tN = shape[1];\n\n\tthis.texture = gl.createDataTexture(M, N, data);\n\n\tthis.shape = [M, N];\n}\n\nmodule.exports = Tensor;\n\nTensor.prototype.delete = function(){\n\tgl.context.deleteTexture(this.texture);\n\tthis.texture = null;\n\tthis.shape = null;\n};\n\nTensor.prototype.transfer = function(keep){\n\n\tvar M = this.shape[0],\n\t\tN = this.shape[1],\n\t\tout,\n\t\tresult;\n\n\t// create output texture\n\tout = gl.createOutputTexture(M, N);\n\n\t// float extraction\n\tgl.encode(M, N, this.texture, out);\n\n\tresult = new Float32Array(gl.readData(M, N));\n\n\t// clean up\n\tgl.context.deleteTexture(out);\n\n\tif(!keep){\n\t\tthis.delete();\n\t}\n\n\treturn result;\n};\n\nTensor.prototype.reshape = function(shape, keep){\n\tthrow new Error(\"Not yet supported\");\n};\n\nTensor.prototype.transpose = function(keep){\n\n\tvar M = this.shape[0],\n\t\tN = this.shape[1];\n\n\t// create new texture to hold tranpose\n\tvar tT = new Tensor([N, M], null);\n\n\t// invoke shader\n\tgl.transpose(M, N, this.texture, tT.texture);\n\n\tif(!keep){\n\t\tthis.delete();\n\t}\n\n\treturn tT;\n};\n","exports.load = function(url, callback) {\n\tvar xhr = new XMLHttpRequest();\n\n\txhr.onreadystatechange = function() {\n\t\tif (xhr.readyState !== 4) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xhr.status >= 200 && xhr.status < 300) {\n\t\t\tcallback(null, xhr.responseText);\n\t\t} else {\n\t\t\tvar err = new Error(\"failed to request file '\" + url + \"'\");\n\t\t\t// follow Node.js error signature\n\t\t\terr.errno = 34;\n\t\t\tcallback(err);\n\t\t}\n\t};\n\n\ttry {\n\t\txhr.open('GET', url, true);\n\t\txhr.send(null);\n\t} catch (err) {\n\t\tcallback(err);\n\t}\n};","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (!callback) {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has inexistant dependency');\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback(null);\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    while(workers < q.concurrency && q.tasks.length){\n                        var tasks = q.payload ?\n                            q.tasks.splice(0, q.payload) :\n                            q.tasks.splice(0, q.tasks.length);\n\n                        var data = _map(tasks, function (task) {\n                            return task.data;\n                        });\n\n                        if (q.tasks.length === 0) {\n                            q.empty();\n                        }\n                        workers += 1;\n                        workersList.push(tasks[0]);\n                        var cb = only_once(_next(q, tasks));\n                        worker(data, cb);\n                    }\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if (typeof module === 'object' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","var WebGL = require('./webgl');\n\n/* A calculator object for the Float texture based AXPY\n\n\ta times X plus Y (AXPY):\n\n\tY = a * X + Y\n\n\twhere X + Y is elementwise matrix addition\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SAXPYCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = standalone || true; // default to standalone mode\n\n\n\tvar s = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\nuniform sampler2D Y;\\t\\t// texture with data from padded transpose of B\\nuniform int       N;\\nuniform float     a; \\t\\t// coefficient to multiplication\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n \\tfloat row = outTex.y;\\n\\tfloat col = outTex.x;\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\tvec4 y = texture2D( Y, vec2(col, row));\\n\\tvec4 sum_v = (a * x) + y;\\n\\tint channel = int(mod(col * float(N), 4.0 ));\\n\\tfloat sum = select_index_1604150559(sum_v, channel);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n}\\n\";\n\t//\tp = glslify('./glsl/saxpy/pipeline.glsl');\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SAXPYCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSAXPYCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSAXPYCalculator.TEXTURE_UNIFORM_NAME_1 = \"Y\";\nSAXPYCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSAXPYCalculator.COEFFICIENT_UNIFORM_NAME = \"a\";\n\n\n/* Calculate the AXPY, with the given data.\n\n\tN - number of elements in X and Y\n\ta - scalar coefficient to X\n\tX - left hand vector (texture)\n\tY - right hand vector (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSAXPYCalculator.prototype.calculate = function(N, a, X, Y, out){\n\n\tvar gl = this.webgl.context;\n\n\t/*\n\tvar h1 = M, w1 = K,\n\t\th2 = K, w2 = N;\n\t*/\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SAXPYCalculator.TEXTURE_UNIFORM_NAME_0);\n\tthis.bindInputTexture(Y, gl.TEXTURE1, SAXPYCalculator.TEXTURE_UNIFORM_NAME_1);\n\n\n\tvar pad = this.webgl.getPad(N);\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N + pad, a);\n\n\t// create our destination texture\n\tthis.webgl.bindOutputTexture(1, N + pad, out);\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE1);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSAXPYCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSAXPYCalculator.prototype.bindUniforms = function(N, a) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SAXPYCalculator.LENGTH_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SAXPYCalculator.COEFFICIENT_UNIFORM_NAME);\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1f(a_gl, a);\n\n};\n","var WebGL = require('./webgl');\n\n/*  a more general version of the BLAS Level 1 scale that works on matrices\n    and includes an elementwise scalar addition\n\n    a * X + b\n\n\twhere X is a matrix, a and b are scalars and operations are elementwise\n\n    to get the standard BLAS scal set M = 1 and b = 0\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SSCALCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar s = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded X\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     b; \\t\\t// additive term\\nuniform float     a; \\t\\t// multiplicative term\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n \\tfloat row = outTex.y;\\n\\tfloat col = outTex.x;\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\tvec4 sum_v = (a * x) + b;\\n\\tint channel = int(mod(col * float(N + pad), 4.0 ));\\n\\tfloat sum = select_index_1604150559(sum_v, channel);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n}\\n\",\n\t\tp = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded X\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     b; \\t\\t// additive term\\nuniform float     a; \\t\\t// multiplicative term\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col_t, row_t));\\n\\tvec4 sum_v = (a * x) + b;\\n\\n\\t// fix padded region\\n\\tif(pad > 0 && col + 4.0 > float(N) ) {\\n\\t\\tfix_pad_1540259130(sum_v, pad);\\n\\t}\\n\\n\\tgl_FragColor = sum_v;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SSCALCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSSCALCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSSCALCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSSCALCalculator.ADD_UNIFORM_NAME = \"b\";\nSSCALCalculator.MUL_UNIFORM_NAME = \"a\";\n\n/* Elementwise scale and offset a matrix\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - scalar coefficient to X\n\tb - scalar offset of X\n\tX - matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSSCALCalculator.prototype.calculate = function(M, N, a, b, X, out){\n\n\tvar gl = this.webgl.context;\n\n\tvar mod = (N % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = mod == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - mod;\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SSCALCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, pad, a, b);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + pad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + pad)/ 4, out);\n\t}\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\ttexture - texture containing the data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSSCALCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSSCALCalculator.prototype.bindUniforms = function(N, pad, a, b) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SSCALCalculator.LENGTH_UNIFORM_NAME),\n\t\tb_gl = gl.getUniformLocation(this.program, SSCALCalculator.ADD_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SSCALCalculator.MUL_UNIFORM_NAME),\n\t\tpad_gl = gl.getUniformLocation(this.program, \"pad\");\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\tgl.uniform1f(a_gl, a);\n\tgl.uniform1f(b_gl, b);\n\n};\n","var WebGL = require('./webgl');\n\n/*  Elementwise clamp function for matrices on the interval [a, b]. Can also be\n\tused for min or max, by passing Number.MIN_VALUE for the first parameter and\n\tNumber.MAX_VALUE for the second parameter, respectively.\n\n\tPassing `null` for either of these parameters will default to it's\n\trespective min or max value.\n\n\tmax(a, min(b, x)) for each x in X\n\n\twhere X is a matrix, a and b are scalars\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SCLMPCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar s = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     a; \\t\\t// lower bound\\nuniform float     b; \\t\\t// upper bound\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row = outTex.y;\\n\\tfloat col = outTex.x;\\n\\n\\t// return 0.0 if in padded region of output texture\\n\\tif(col * float(N + pad) > float(N) ) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\tvec4 val = clamp(x, a, b);\\n\\n\\t// select and output channel (standalone version only)\\n\\tint channel = int(mod(col * float(N + pad), 4.0));\\n\\tfloat sum = select_index_1604150559(val, channel);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n}\\n\",\n\t\tp = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     a; \\t\\t// lower bound\\nuniform float     b; \\t\\t// upper bound\\n\\n// set pad values to 0.0, if in padded region of output texture\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\tv.a = 0.0;\\n\\tif(pad == 2){\\n\\t\\tv.b = 0.0;\\n\\t} else if(pad == 3){\\n\\t\\tv.b = 0.0;\\n\\t\\tv.g = 0.0;\\n\\t}\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col_t, row_t));\\n\\tvec4 val_v = clamp(x, a, b);\\n\\n\\t// is last element in pixel past row length?\\n\\tif(pad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// fix elements in padded region\\n\\t\\tfix_pad_1540259130(val_v, pad);\\n\\t}\\n\\n\\tgl_FragColor = val_v;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SCLMPCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSCLMPCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSCLMPCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSCLMPCalculator.LOWER_UNIFORM_NAME = \"a\";\nSCLMPCalculator.UPPER_UNIFORM_NAME = \"b\";\n\n\n/* Elementwise clamp a matrix to the interval [a, b]\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - lower bound (inclusize)\n\tb - upper bound (inclusive)\n\tX - matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSCLMPCalculator.prototype.calculate = function(M, N, a, b, X, out){\n\n\ta = (a != null) ? a : Number.MIN_VALUE;\n\tb = (b != null) ? b : Number.MAX_VALUE;\n\n\tvar gl = this.webgl.context;\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SCLMPCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\tvar nPad = this.webgl.getPad(N);\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, nPad, a, b);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + nPad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + nPad)/ 4, out);\n\t}\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSCLMPCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSCLMPCalculator.prototype.bindUniforms = function(N, pad, a, b) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SCLMPCalculator.LENGTH_UNIFORM_NAME),\n\t\tb_gl = gl.getUniformLocation(this.program, SCLMPCalculator.UPPER_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SCLMPCalculator.LOWER_UNIFORM_NAME),\n\t\tpad_gl = gl.getUniformLocation(this.program, \"pad\");\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\tgl.uniform1f(a_gl, a);\n\tgl.uniform1f(b_gl, b);\n\n};\n","var WebGL = require('./webgl');\n\n/*  Downsample an image (useful in pooling layers).\n\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction DownsampleCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar s = \"#define GLSLIFY 1\\n// TODO: unroll loop for stride == factor and small values (2, 3)\\nprecision highp float;\\n\\nvarying vec2      outTex;  // texture coords of row/column to calculate\\nuniform sampler2D X;       // texture with data from padded A\\nuniform int       factor;  // width of image patch\\nuniform float     stride;  // width between image patches\\nuniform float     C;       // number of channels\\nuniform float     M;\\nuniform float     N;\\nuniform float     N_out;\\nuniform float     M_out;\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate and translate to output pixel space.\\n\\tfloat row = floor(outTex.y * M_out);   // row on output texture (matrix space)\\n\\tfloat col = floor(outTex.x * N_out); // column on output texture (matrix space)\\n\\tfloat vcol = floor(col / C);   // virtual column on output texture (matrix space)\\n\\tfloat vchannel = floor(mod(col, C)); // virtual channel on output texture\\n\\n\\tconst float min = -1.0e+08;\\n\\tvec4 currentMax = vec4(min, min, min, min);\\n\\n\\tfloat deltaY = 1.0/M;\\n\\tfloat deltaX = 1.0/N;\\n\\tfloat y = ((row * stride) + 0.5)*deltaY; // texture position of input row\\n\\tfloat x;\\n\\tfloat z = vchannel * deltaX;\\n\\tfor (int i = 0; i < 100; i += 1) {\\n\\t\\tif (i >= factor) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tx = ((vcol * stride * C) + 0.5) * deltaX; // texture position of input column\\n\\n\\t\\tfor (int j = 0; j < 100; j += 1) {\\n\\t\\t\\tif (j >= factor) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec2 coords = vec2(x + z, y);\\n\\t\\t\\tvec4 x_v = texture2D(X, coords);\\n\\t\\t\\tcurrentMax = max(currentMax, x_v);\\n\\n\\t\\t\\tx += (deltaX * C);\\n\\t\\t}\\n\\t\\ty += deltaY;\\n\\t}\\n\\tint chan = int(mod(outTex.x * N_out, 4.0 ));\\n\\tfloat val = select_index_1604150559(currentMax, int(chan));\\n\\tif (val == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\tgl_FragColor = encode_float_1540259130(val);\\n}\\n\";\n\t\tp = \"#define GLSLIFY 1\\n// TODO: unroll loop for stride == factor and small values (2, 3)\\nprecision highp float;\\n\\nvarying vec2      outTex;  // texture coords of row/column to calculate\\nuniform sampler2D X;       // texture with data from padded A\\nuniform int       factor;  // width of image patch\\nuniform float     stride;  // width between image patches\\nuniform float     C;       // number of channels\\nuniform float     M;\\nuniform float     N;\\nuniform float     N_out;\\nuniform float     M_out;\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate and translate to output pixel space.\\n\\tfloat row = floor(outTex.y * M_out);   // row on output texture (pixel space)\\n\\tfloat col = floor(outTex.x * N_out); // column on output texture (matrix space)\\n\\tfloat vcol = floor(col / C);   // virtual column on output texture (matrix space)\\n\\tfloat vchannel = floor(mod(col, C)); // virtual channel on output texture\\n\\n\\tconst float min = -1.0e+08;\\n\\tvec4 currentMax = vec4(min, min, min, min);\\n\\n\\tfloat deltaY = 1.0/M;\\n\\tfloat deltaX = 1.0/N;\\n\\tfloat y = ((row * stride) + 0.5)*deltaY; // texture position of input row\\n\\tfloat x;\\n\\tfloat z = vchannel * deltaX;\\n\\tfor (int i = 0; i < 100; i += 1) {\\n\\t\\tif (i >= factor) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tx = ((vcol * stride * C) + 0.5) * deltaX; // texture position of input column\\n\\n\\t\\tfor (int j = 0; j < 100; j += 1) {\\n\\t\\t\\tif (j >= factor) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec2 coords = vec2(x + z, y);\\n\\t\\t\\tvec4 x_v = texture2D(X, coords);\\n\\t\\t\\tcurrentMax = max(currentMax, x_v);\\n\\n\\t\\t\\tx += (deltaX * C);\\n\\t\\t}\\n\\t\\ty += deltaY;\\n\\t}\\n\\n\\tgl_FragColor = currentMax;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = DownsampleCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nDownsampleCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nDownsampleCalculator.INPUT_ROW_COUNT_UNIFORM_NAME = \"M\";\nDownsampleCalculator.INPUT_COLUMN_COUNT_UNIFORM_NAME = \"N\";\nDownsampleCalculator.OUTPUT_ROW_COUNT_UNIFORM_NAME = \"M_out\";\nDownsampleCalculator.OUTPUT_COLUMN_COUNT_UNIFORM_NAME = \"N_out\";\nDownsampleCalculator.FACTOR_UNIFORM_NAME = \"factor\";\nDownsampleCalculator.STRIDE_UNIFORM_NAME = \"stride\";\nDownsampleCalculator.CHANNEL_COUNT_UNIFORM_NAME = \"C\";\n\n\n/* Downsample (pool) the input using the maximum for each channel.\n\n\tM - rows in X\n\tN - columns in X\n\tc - (channels / 4) in X\n\tfactor - the number of pixels (width and height) to combine\n\tstride - amount between groups of pixels\n\tX - input matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nDownsampleCalculator.prototype.calculate = function(M, N, channels, factor, stride, X, out){\n\n\tif(channels % WebGL.COMPONENTS_PER_TEXEL != 0){\n\t\tthrow new Error(\"Channel count must be a multiple of \" + WebGL.COMPONENTS_PER_TEXEL);\n\t}\n\tvar gl = this.webgl.context;\n\n    var N_out = (Math.floor((N - factor) / stride) + 1) * channels;\n    var M_out = Math.floor((M - factor) / stride) + 1;\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, DownsampleCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(M, N * channels, M_out, N_out, factor, stride, channels);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M_out, N_out, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M_out, N_out/WebGL.COMPONENTS_PER_TEXEL, out);\n\t}\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\ttexture - texture containing input values to bind\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nDownsampleCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nDownsampleCalculator.prototype.bindUniforms = function(M, N, M_out, N_out, factor, stride, c) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar M_gl = gl.getUniformLocation(this.program, DownsampleCalculator.INPUT_ROW_COUNT_UNIFORM_NAME),\n\t\tN_gl = gl.getUniformLocation(this.program, DownsampleCalculator.INPUT_COLUMN_COUNT_UNIFORM_NAME),\n\t\tM_out_gl = gl.getUniformLocation(this.program, DownsampleCalculator.OUTPUT_ROW_COUNT_UNIFORM_NAME),\n\t\tN_out_gl = gl.getUniformLocation(this.program, DownsampleCalculator.OUTPUT_COLUMN_COUNT_UNIFORM_NAME),\n\t\tfactor_gl = gl.getUniformLocation(this.program, DownsampleCalculator.FACTOR_UNIFORM_NAME),\n\t\tstride_gl = gl.getUniformLocation(this.program, DownsampleCalculator.STRIDE_UNIFORM_NAME),\n\t\tchannel_count_gl = gl.getUniformLocation(this.program, DownsampleCalculator.CHANNEL_COUNT_UNIFORM_NAME);\n\n\t// bind length of shared dimension\n\tgl.uniform1f(M_gl, M);\n\tgl.uniform1f(N_gl, N);\n\tgl.uniform1f(M_out_gl, M_out);\n\tgl.uniform1f(N_out_gl, N_out);\n\tgl.uniform1i(factor_gl, factor);\n\tgl.uniform1f(stride_gl, stride);\n\tgl.uniform1f(channel_count_gl, c);\n\n};\n","var WebGL = require('./webgl');\n\n/* A calculator object for the Float texture based GEMM\n\n\tGeneralized Matrix Multiply (GEMM):\n\n\tC = alpha * A * B + beta * C\n\n\twhere A * B is matrix multiplication\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SGEMMCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\t// read GLSL files\n\tvar s = \"#define GLSLIFY 1\\n// fragment shader that calculates the matrix product and renders each\\n// element to the bytes representing a 32-bit IEEE754 floating point in\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1604150559(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\t// sum row x col for the passed pixel\\n\\tfloat sum = alpha * dot_rowcol_1540259130(row_t, col_t * float(N + pad)/float(N), A, B_t, K);\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1604150559(sum);\\n}\\n\",\n\t\ts_c = \"#define GLSLIFY 1\\n// fragment shader that calculates the matrix product (with additive 'C' term)\\n// and renders each element to the bytes representing a 32-bit IEEE754 floating\\n// point in the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform sampler2D C;\\t\\t// texture with data from C\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\nuniform float     beta; \\t// coefficient to additive term\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1604150559(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1117569599(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tvec4 c_vec = texture2D(C, vec2(col_t, 0.5));\\n\\n\\t// should be -0.5, but that subtly breaks at zero\\n\\tfloat col = col_t * float(N + pad); // index of first element in pixel (matrix space)\\n\\tint channel = int(mod(col, 4.0 ));\\n\\tfloat c = select_index_1117569599(c_vec, channel);\\n\\n\\t// sum row x col for the passed pixel\\n\\tfloat sum = alpha * dot_rowcol_1540259130(row_t, col_t * float(N + pad)/float(N), A, B_t, K);\\n\\tsum += beta * c;\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1604150559(sum);\\n}\\n\",\n\t\tp = \"#define GLSLIFY 1\\n// fragment shader that calculates the matrix product and writes each\\n// element to a pixel component in a floating point texture.\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tvec4 sum_v = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\tsum_v.r = alpha * dot_rowcol_1540259130(row_t, (col + 0.5)/float(N), A, B_t, K);\\n\\t// is last element in pixel past row length?\\n\\tif(pad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// compute elements in padded region\\n\\t\\tif(pad < 3){\\n\\t\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t\\tif(pad < 2){\\n\\t\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t} else {\\n\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.a = alpha * dot_rowcol_1540259130(row_t, (col + 3.5)/float(N), A, B_t, K);\\n\\t}\\n\\n\\tgl_FragColor = sum_v;\\n}\\n\",\n\t\tp_c = \"#define GLSLIFY 1\\n// fragment shader that calculates the matrix product and writes each\\n// element to a pixel component in a floating point texture.\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform sampler2D C;\\t\\t// texture with data from C\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\nuniform float     beta; \\t// coefficient to addition\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\n// identified by the passed indeces (output texture coordinate space).\\n// We loop over elements in the row and column and sum the product\\n// using the glsl `dot` function to process four elements at a time.\\n// This four element optimization requires that the matrix B be\\n// transposed before texel packing and that both matrices be padded\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\n\\t\\t// l is in pixel space, so we divide by four\\n\\n\\t\\t// retrieve next four elements from each texture\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\n\\t}\\n\\treturn sum;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tvec4 c_v = texture2D(C, vec2(col_t, 0.5));\\n\\n\\tvec4 sum_v = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\tsum_v.r = alpha * dot_rowcol_1540259130(row_t, (col + 0.5)/float(N), A, B_t, K);\\n\\t// in the padding region?\\n\\tif(pad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// pad\\n\\t\\tif(pad < 3){\\n\\t\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t\\tif(pad < 2){\\n\\t\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\t}\\n\\t} else {\\n\\t\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\t\\tsum_v.a = alpha * dot_rowcol_1540259130(row_t, (col + 3.5)/float(N), A, B_t, K);\\n\\t}\\n\\n\\tgl_FragColor = sum_v + beta*c_v;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program_ = this.webgl.createProgram(s);\n\t\tthis.program_c = this.webgl.createProgram(s_c);\n\t} else {\n\t\tthis.program_ = this.webgl.createProgram(p);\n\t\tthis.program_c = this.webgl.createProgram(p_c);\n\t}\n\n}\n\nmodule.exports = SGEMMCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_0 = \"A\";\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_1 = \"B_t\";\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_2 = \"C\";\nSGEMMCalculator.SHARED_LENGTH_UNIFORM_NAME = \"K\";\nSGEMMCalculator.COLUMN_COUNT_UNIFORM_NAME = \"N\";\nSGEMMCalculator.PAD_UNIFORM_NAME = \"pad\";\nSGEMMCalculator.ALPHA_UNIFORM_NAME = \"alpha\";\nSGEMMCalculator.BETA_UNIFORM_NAME = \"beta\";\n\n/* Calculate the GEMM, with the given data.\n\n\tM - number of rows in A\n\tN - number of columns in B\n\tK - number of elements in shared dimension (including padding)\n\talpha - scalar for A\n\tA - left hand matrix (as padded texture)\n\tB - transpose of right hand matrix (as padded texture)\n\tbeta - scalar for C\n\tC - additive matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n TODO: signature should look like this:\n ( TRANSA, TRANSB, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC )\n http://www.math.utah.edu/software/lapack/lapack-blas/dgemm.html\n */\nSGEMMCalculator.prototype.calculate = function(M, N, K, alpha, A, B, beta, C, out){\n\n\tvar gl = this.webgl.context;\n\n\t/*\n\tvar h1 = M, w1 = K,\n\t\th2 = K, w2 = N;\n\t*/\n\n\t// set this calculator program as the active program\n\tif(C != null){\n\t\tthis.program = this.program_c;\n\t} else {\n\t\tbeta = null;\n\t\tthis.program = this.program_;\n\t\t//console.log(\"no C\");\n\t}\n\tthis.webgl.selectProgram(this.program);\n\n\t//  bind our input textures containing matrix data\n\tthis.bindInputTexture(A, gl.TEXTURE0, SGEMMCalculator.TEXTURE_UNIFORM_NAME_0);\n\tthis.bindInputTexture(B, gl.TEXTURE1, SGEMMCalculator.TEXTURE_UNIFORM_NAME_1);\n\tif(C != null){\n\t\tthis.bindInputTexture(C, gl.TEXTURE2, SGEMMCalculator.TEXTURE_UNIFORM_NAME_2);\n\t}\n\n\tvar kPad = this.webgl.getPad(K),\n\t\tnPad = this.webgl.getPad(N);\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, K + kPad, nPad, alpha, beta);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + nPad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + nPad)/ 4, out);\n\t}\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE1);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE2);\n\n\t// result can now be read with gl.readResult, or more operations can be\n\t// performed on destination texture (in pipeline mode)\n};\n\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSGEMMCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n\n/* Set up inputs for the texture shader\n\n\tK - size of shared dimension for multiplied matrices\n */\nSGEMMCalculator.prototype.bindUniforms = function(N, K, pad, alpha, beta) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar K_gl\t = gl.getUniformLocation(this.program, SGEMMCalculator.SHARED_LENGTH_UNIFORM_NAME),\n\t\talpha_gl = gl.getUniformLocation(this.program, SGEMMCalculator.ALPHA_UNIFORM_NAME),\n\t\tbeta_gl = gl.getUniformLocation(this.program, SGEMMCalculator.BETA_UNIFORM_NAME),\n\t\tN_gl = gl.getUniformLocation(this.program, SGEMMCalculator.COLUMN_COUNT_UNIFORM_NAME),\n\t\tpad_gl = pad_gl = gl.getUniformLocation(this.program, SGEMMCalculator.PAD_UNIFORM_NAME);\n\n\tgl.uniform1f(beta_gl, beta);\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\n\t// bind length of shared dimension\n\tgl.uniform1i(K_gl, K);\n\t// bind alpha\n\tgl.uniform1f(alpha_gl, alpha);\n\n};\n","\n/*\nCopyright (c) 2015 Waylon Flinn\n\nwebgl.js\n\nmultiply matrices up to 4096 x 4096 on GPUs that support OES_texture_float\nextension. input is encoded into the red and green channels of an input texture and\ncalculations are done using a custom fragment shader.\n\n*/\n\n\n/*\n\tA WebGL context associated with a specific canvas element.\n\n\t* creates a canvas\n\t* sets up webgl context\n\t* translates numbers into textures\n\t* compiles shader programs for executing math (when supplied with an\n\t\toperation specific fragment shader)\n */\nfunction WebGL(options) {\n\n\tvar glOptions,\n\t\text;\n\n\toptions = options || {};\n\n\t// canvas\n\tif(typeof options.canvas === 'undefined')\n\t\tthis.canvas = document.createElement('canvas');\n\telse\n\t\tthis.canvas = options.canvas;\n\n\t// context\n\tglOptions = { premultipliedAlpha: false, preserveDrawingBuffer: false };\n\tthis.context = this.canvas.getContext(\"experimental-webgl\", glOptions);\n\n\tif (typeof this.context === 'undefined')\n\t\tthrow new Error(\"No support for Webgl.\");\n\n\t// float texture extension\n\ttry {\n\t\text = this.context.getExtension('OES_texture_float');\n\t} catch(e) {\n\n\t}\n\tif ( !ext ) {\n\t\tconsole.log(\"No support for OES_texture_float extension.\");\n\t\tthis.hasFloat = false;\n\t} else {\n\t\tthis.hasFloat = true;\n\t}\n\n\tvar highp = this.context.getShaderPrecisionFormat(this.context.FRAGMENT_SHADER, this.context.HIGH_FLOAT);\n\tthis.hasHighPrecision = highp.precision != 0;\n\tif(this.hasHighPrecision) this.highp = highp;\n\n\t// create pass through vertex shader\n\tvar passThrough = \"#define GLSLIFY 1\\n// vertex shader for a single quad\\n// work is performed in the operation specific texture shader\\n\\nprecision highp float;\\n\\nattribute vec3 pos;\\nattribute vec2 tex;\\nvarying vec2   outTex;\\nvoid main(void)\\n{\\n\\t// just pass the position and texture coords\\n\\tgl_Position = vec4(pos, 1.0);\\n\\toutTex = tex;\\n}\\n\";\n\tthis.vertexShader = this.context.createShader(this.context.VERTEX_SHADER);\n\tthis.context.shaderSource(this.vertexShader, passThrough);\n\tthis.context.compileShader(this.vertexShader);\n\n\tvar encode = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\n\\n\\treturn vec4(m3,m2,m1,e);\\n}\\n\\n// select an element from a vector based on index\\nfloat select_index_1604150559(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tvec4 val_v = texture2D(A, vec2(col_t * float(N)/float(N + pad), row_t));\\n\\tint channel = int(mod(col_t * float(N), 4.0 ));\\n\\tfloat val = select_index_1604150559(val_v, channel);\\n\\n\\tif (val == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1540259130(val);\\n}\\n\",\n\t\ttranspose = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform int       M;\\t\\t// number of rows in output\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       mpad;\\t\\t//\\nuniform int       npad;\\t\\t//\\n\\n// select an element from a vector based on index\\nfloat select_index_1540259130(vec4 v, int index){\\n\\tfloat val;\\n\\tif (index == 0) {\\n\\t\\tval = v.r;\\n\\t} else if(index == 1) {\\n\\t\\tval = v.g;\\n\\t} else if(index == 2) {\\n\\t\\tval = v.b;\\n\\t} else if(index == 3){\\n\\t\\tval = v.a;\\n\\t} else {\\n\\t\\t// should never be here\\n\\t\\tval = 0.0;\\n\\t}\\n\\n\\treturn val;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = (col_t * float(N + npad) - 2.0); // index of first element in pixel (matrix space)\\n\\n\\t// get rows in the input, each containing one element in the output\\n\\tvec4 row_1 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 0.5)/float(N)));\\n\\tvec4 row_2 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 1.5)/float(N)));\\n\\tvec4 row_3 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 2.5)/float(N)));\\n\\tvec4 row_4 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 3.5)/float(N)));\\n\\n\\t// package into output vector\\n\\tint channel = int(mod(row_t * float(M), 4.0 ));\\n\\n\\tvec4 col_v = vec4(0.0, 0.0, 0.0, 0.0); // vec4 representing four elements in a column in the input\\n\\n\\t// extract relevent element from each input row\\n\\tcol_v.r = select_index_1540259130(row_1, channel);\\n\\tif(npad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// compute elements in padded region\\n\\t\\tif(npad < 3){\\n\\t\\t\\tcol_v.g = select_index_1540259130(row_2, channel);\\n\\t\\t}\\n\\t\\tif(npad < 2){\\n\\t\\t\\tcol_v.b = select_index_1540259130(row_3, channel);\\n\\t\\t}\\n\\t} else {\\n\\t\\tcol_v.g = select_index_1540259130(row_2, channel);\\n\\t\\tcol_v.b = select_index_1540259130(row_3, channel);\\n\\t\\tcol_v.a = select_index_1540259130(row_4, channel);\\n\\t}\\n\\n\\tgl_FragColor = col_v;\\n}\\n\";\n\n\tthis.encode_program = this.createProgram(encode);\n\n\tthis.transpose_program = this.createProgram(transpose);\n};\n\nmodule.exports = WebGL;\n\n// RGBA is the standard input/ouput texture\nWebGL.COMPONENTS_PER_TEXEL = 4;\n\nWebGL.POSITION_UNIFORM_NAME = \"pos\";\nWebGL.TEXTURE_UNIFORM_NAME = \"tex\";\n\n\nWebGL.prototype.encode = function(M, N, texture0, out){\n\n\tthis.program = this.encode_program;\n\tthis.selectProgram(this.program);\n\n\tvar pad = this.getPad(N);\n\n\tvar N_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tpad_gl = this.context.getUniformLocation(this.program, \"pad\");\n\n\tthis.context.uniform1i(N_gl, N);\n\tthis.context.uniform1i(pad_gl, pad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(M, N, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n}\n\n/* tranpose a texture where input has M rows and N columns\n */\nWebGL.prototype.transpose = function(M, N, texture0, out){\n\n\tthis.program = this.transpose_program;\n\tthis.selectProgram(this.program);\n\n\tvar npad = this.getPad(N),\n\t\tmpad = this.getPad(M);\n\n\t// in the shader M and N describe rows and columns in the *output*, respectively\n\tvar N_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tnpad_gl = this.context.getUniformLocation(this.program, \"npad\"),\n\t\tM_gl = this.context.getUniformLocation(this.program, \"M\"),\n\t\tmpad_gl = this.context.getUniformLocation(this.program, \"mpad\");\n\n\tthis.context.uniform1i(N_gl, M);\n\tthis.context.uniform1i(npad_gl, mpad);\n\tthis.context.uniform1i(M_gl, N);\n\tthis.context.uniform1i(mpad_gl, npad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(N, (M + mpad)/4, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n}\n\nWebGL.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.context,\n\t\tprogram = this.encode_program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/*  Create a shader program based on a pass through vertex shader and\n\tthe supplied operation specific fragment shader.\n\n\tfragmentShaderSource - string containing the fragment shader source code.\n\tshader will recieve `vec2 outTex` with texture coordinates from the pass\n\tthrough vertex shader.\n */\nWebGL.prototype.createProgram = function(fragmentShaderSource){\n\tvar gl = this.context,\n\t\tfragmentShader;\n\n\t// compile the provided fragment/texture shader\n\tfragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(fragmentShader, fragmentShaderSource);\n\tgl.compileShader(fragmentShader);\n\n\t// did it compile correctly?\n\tif (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) == 0)\n\t\tthrow new Error(gl.getShaderInfoLog(fragmentShader));\n\n\t// link the program specific fragment shader and the generic pass through\n\t// shader into a program\n\tvar program = gl.createProgram();\n\tgl.attachShader(program, this.vertexShader);\n\tgl.attachShader(program, fragmentShader);\n\tgl.linkProgram(program);\n\n\treturn program;\n};\n\nWebGL.prototype.selectProgram = function(program){\n\n\tvar gl = this.context;\n\n\t// set calculator program to current shader program\n\tgl.useProgram(program);\n\n\tthis.bindVertices(program);\n};\n\n/* setup required to draw a square to our vertex shader and have\n   fragment shader called for each pixel\n */\nWebGL.prototype.bindVertices = function(program) {\n\tvar gl = this.context,\n\t\trenderer = program;\n\n\t// bind vertices\n\tvar position = gl.getAttribLocation(renderer, WebGL.POSITION_UNIFORM_NAME);\n\tvar vertexBuffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\n\t// define a square that covers the screen\n\tvar vertices = [-1.0, -1.0, 0.0,\t// bottom left\n\t\t\t\t\t 1.0, -1.0, 0.0,\t// bottom right\n\t\t\t\t\t 1.0,  1.0, 0.0,\t// top right\n\t\t\t\t\t-1.0,  1.0, 0.0];\t// top left\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\tgl.vertexAttribPointer(position, /*item size*/3, gl.FLOAT, false, 0, 0);\n\tgl.enableVertexAttribArray(position);\n\n\t// bind texture cords\n\tvar texture = gl.getAttribLocation(renderer, WebGL.TEXTURE_UNIFORM_NAME);\n\tvar texCoords = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, texCoords);\n\tvar textureCoords = [0.0, 0.0,\n\t\t\t\t\t\t 1.0, 0.0,\n\t\t\t\t\t\t 1.0, 1.0,\n\t\t\t\t\t\t 0.0, 1.0];\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);\n\tgl.vertexAttribPointer(texture, /*item size*/2, gl.FLOAT, false, 0, 0);\n\tgl.enableVertexAttribArray(texture);\n\n\t// index to vertices\n\tvar indices = gl.createBuffer();\n\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n\t// tesselate square into triangles\n\t// indeces into vertex array creating triangles, with counter-clockwise winding\n\tvar vertexIndices = [0, 1, 2,\t// bottom right triangle\n\t\t\t\t\t\t 0, 2, 3];\t// top left triangle\n\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW);\n};\n\n/* create RGBA texture of width w/4 from given texels\n   padding the width of each row to a multiple of 4, where necessary.\n\n   if texels is null, an empty texture is created.\n\n   alternative to textures?\n   http://stackoverflow.com/questions/17203508/webgl-hardware-skinning-with-a-bone-texture\n */\nWebGL.prototype.createDataTexture = function(h, w, texels){\n\n\tvar gl = this.context;\n\n\tvar PAD_VALUE = 0.0; // value to pad remainder with\n\n\tvar rem = (w % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = rem == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - rem;\n\n\t// create the texture from our floats\n\tvar texture = gl.createTexture();\n\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\t/*\n\t// https://www.opengl.org/wiki/GLAPI/glPixelStore\n    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, w/4);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n\n\tsee also: https://www.opengl.org/wiki/Common_Mistakes#Creating_a_complete_texture\n\t*/\n\tif(pad == 0 || texels == null || typeof texels === 'undefined'){\n\t\t// no padding required, write directly from input array\n\t\tgl.texImage2D(\t  gl.TEXTURE_2D, 0, gl.RGBA, (w + pad) / WebGL.COMPONENTS_PER_TEXEL, h, 0,\n\t\t\t\t\t\t  gl.RGBA, gl.FLOAT, texels);\n\n\t} else {\n\t\t// must pad each row\n\n\t\t// create empty texture\n\t\tgl.texImage2D(\t  gl.TEXTURE_2D, 0, gl.RGBA, (w + pad) / WebGL.COMPONENTS_PER_TEXEL, h, 0,\n\t\t\t\t\t\t  gl.RGBA, gl.FLOAT, null);\n\n\t\tvar full_texel_row_len = w - rem,\n\t\t\tfull_row_texture_width = full_texel_row_len / WebGL.COMPONENTS_PER_TEXEL;\n\n\t\tvar row_start = 0;\n\t\tvar last_texel = new Float32Array(WebGL.COMPONENTS_PER_TEXEL);\n\t\tvar row, remainder;\n\n\t\t// set texture data, one row at a time, padding each row to a multiple\n\t\t// of the texel length\n\t\tfor(var i = 0; i < h; i++){\n\t\t\trow_start = i * w;\n\t\t\tfull_texel_row_end = row_start + full_texel_row_len;\n\t\t\trow = new Float32Array(texels.buffer, row_start * texels.BYTES_PER_ELEMENT, full_texel_row_len);\n\t\t\tif(full_texel_row_len > 0){\n\t\t\t\t// https://www.khronos.org/registry/webgl/specs/latest/1.0/index.html#TEXSUBIMAGE2D\n\t\t\t\tgl.texSubImage2D(gl.TEXTURE_2D,\n\t\t\t\t\t 0,\t\t\t\t\t// mip-map level\n\t\t\t\t\t 0,\t\t\t\t\t// x-offset\n\t\t\t\t\t i,\t\t\t\t\t// y-offset\n\t\t\t\t\t full_row_texture_width,\t// width\n\t\t\t\t\t 1,\t\t\t\t\t// height\n\t\t\t\t\t gl.RGBA,\t\t\t// format\n\t\t\t\t\t gl.FLOAT,\t\t\t// type\n\t\t\t\t\t row\t\t\t// data\n\t\t\t\t );\n\t\t\t}\n\n\t\t\t// pad the last pixel to 4 components, using PAD_VALUE for extra\n\t\t\tlast_texel.fill(PAD_VALUE);\n\t\t\tremainder = new Float32Array(texels.buffer, full_texel_row_end * texels.BYTES_PER_ELEMENT, rem);\n\t\t\tlast_texel.set(remainder); // copy remaining data\n\n\t\t\tgl.texSubImage2D(gl.TEXTURE_2D,\n\t\t\t\t 0,\t\t\t\t// mip-map level\n\t\t\t\t full_row_texture_width, // x-offset\n\t\t\t\t i,\t\t\t\t// y-offset\n\t\t\t\t 1,\t\t\t\t// width\n\t\t\t\t 1,\t\t\t\t// height\n\t\t\t\t gl.RGBA,\t\t// format\n\t\t\t\t gl.FLOAT,\t\t// type\n\t\t\t\t last_texel\t\t// data\n\t\t\t );\n\t\t}\n\t}\n\n\t// clamp to edge to support non-power of two textures\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n\t// don't interpolate when getting data from texture\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n\t// we're done with setup, so unbind current texture\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\treturn texture;\n};\n\n/* Create a (padded) texture suitable for reading into an array with readPixels.\n\tUNSIGNED_BYTE\n   Can be passed to bindDestinationTexture.\n\n   Returns an unsigned byte RGBA texture (other formats are not yet supported\n\ton most platforms, see WEBGL_color_buffer_float extension)\n */\nWebGL.prototype.createOutputTexture = function(h, w) {\n\tvar gl = this.context;\n\n\tvar pad = this.getPad(w);\n\n\t// create and bind texture to render to\n\tvar destTexture = gl.createTexture();\n\t//gl.activeTexture(gl.TEXTURE2);\n\tgl.bindTexture(gl.TEXTURE_2D, destTexture);\n\tgl.texImage2D(gl.TEXTURE_2D,/*level*/0, gl.RGBA, w + pad, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t// clamp to edge to support non-power of two textures\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t// don't interpolate when getting data from texture\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n\t// we're done with setup, so unbind current texture\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\treturn destTexture;\n};\n\n/* Set up output\n\n\tM - number of rows in output\n\tN - number of columns in output\n\tdstTex - texture for holding the output\n */\nWebGL.prototype.bindOutputTexture = function(M, N, texture) {\n\tvar gl = this.context;\n\n\t// set canvas and viewport size\n\tthis.canvas.height = M;\n\tthis.canvas.width = N;\n\tgl.viewport(0, 0, N, M);\n\n\t// create and bind framebuffer\n\tthis.framebuffer = this.framebuffer || gl.createFramebuffer();\n\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, /*level*/0);\n\n\n\tif( gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)\n\t\tthrow new Error(\"Bound framebuffer is not complete.\");\n\n\treturn this.framebuffer;\n};\n\nWebGL.prototype.unbindInputTexture = function(textureUnit){\n\tvar gl = this.context;\n\n\tgl.activeTexture(textureUnit);\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n};\n\n/* Read data out as unsigned bytes */\nWebGL.prototype.readData = function(M, N){\n\tvar gl = this.context;\n\n\t// create destination buffer\n\trawbuffer = new ArrayBuffer(M*N*Float32Array.BYTES_PER_ELEMENT);\n\n\t// read the result into our buffer, as bytes\n\tprod = new Uint8Array(rawbuffer);\n\tgl.readPixels(0, 0, N, M, gl.RGBA, gl.UNSIGNED_BYTE, prod);\n\n\t// return raw result bytes\n\treturn rawbuffer; // M x N\n};\n\n// how many extra elements do we need to fill up a pixel?\nWebGL.prototype.getPad = function(N){\n\n\tvar rem = (N % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = rem == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - rem;\n\n\treturn pad;\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}