{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","lib/globals.js","lib/pipeline.js","lib/test.js","lib/saxpycalculator.js","lib/sscalcalculator.js","lib/sdwnscalculator.js","lib/sclmpcalculator.js","lib/sgemmcalculator.js","lib/tensor.js","node_modules/async/lib/async.js","node_modules/floader/lib/xhr-loader.js","lib/webgl.js","node_modules/browserify/node_modules/process/browser.js"],"names":["sgemm","M","N","K","alpha","A","B","beta","C","length","Error","texels1","texels0","texels2","transpose","texture0","gl","createDataTexture","texture1","texture2","texture3","createOutputTexture","sgemmcalculator","calculate","rawBuffer","readData","context","deleteTexture","Float32Array","saxpy","a","X","Y","isFloat32Array","fill","saxpycalculator","obj","Object","prototype","toString","call","sscal","b","sscalcalculator","sstd","mu","sigma","sdwns","channels","factor","stride","N_out","Math","floor","M_out","sdwnscalculator","sclmp","Number","MIN_VALUE","MAX_VALUE","sclmpcalculator","isNumeric","parseFloat","fromArray","array","type","tranpose","data","c","shape","ii","jj","r","typedArray","result","constructor","i","j","globals","require","pipeline","SGEMMCalculator","SAXPYCalculator","SSCALCalculator","SDWNSCalculator","SCLMPCalculator","test","module","exports","gpu","bind","encode","util","String","format","args","arguments","this","replace","match","number","WebGL","t0","tOut","Tensor","texture","t1","t2","async","loader","allclose","RTOL","ATOL","console","log","index","abs","randomArray","row","random","sqrt","push","padData","pad","padded","set","subarray","load","testDirectory","matrixFiles","callback","testFiles","map","item","err","results","matrices","JSON","parse","assert","t","msg","ok","actual","expected","_assert","message","operator","extra","webgl","standalone","s","program","createProgram","p","TEXTURE_UNIFORM_NAME_0","TEXTURE_UNIFORM_NAME_1","LENGTH_UNIFORM_NAME","COEFFICIENT_UNIFORM_NAME","out","selectProgram","bindInputTexture","TEXTURE0","TEXTURE1","getPad","bindUniforms","bindOutputTexture","drawElements","TRIANGLES","UNSIGNED_SHORT","unbindInputTexture","textureUnit","name","activeTexture","bindTexture","TEXTURE_2D","sampler","getUniformLocation","uniform1i","N_gl","a_gl","uniform1f","ADD_UNIFORM_NAME","MUL_UNIFORM_NAME","mod","COMPONENTS_PER_TEXEL","b_gl","pad_gl","DownsampleCalculator","INPUT_ROW_COUNT_UNIFORM_NAME","INPUT_COLUMN_COUNT_UNIFORM_NAME","OUTPUT_ROW_COUNT_UNIFORM_NAME","OUTPUT_COLUMN_COUNT_UNIFORM_NAME","FACTOR_UNIFORM_NAME","STRIDE_UNIFORM_NAME","CHANNEL_COUNT_UNIFORM_NAME","M_gl","M_out_gl","N_out_gl","factor_gl","stride_gl","channel_count_gl","LOWER_UNIFORM_NAME","UPPER_UNIFORM_NAME","nPad","s_c","p_c","program_","program_c","TEXTURE_UNIFORM_NAME_2","SHARED_LENGTH_UNIFORM_NAME","COLUMN_COUNT_UNIFORM_NAME","PAD_UNIFORM_NAME","ALPHA_UNIFORM_NAME","BETA_UNIFORM_NAME","TEXTURE2","kPad","K_gl","alpha_gl","beta_gl","transfer","keep","reshape","tT","noop","identity","v","toBool","notId","only_once","fn","apply","_once","_isArrayLike","arr","_isArray","_arrayEach","iterator","_map","Array","_range","count","_reduce","memo","x","_forEachOf","object","_keys","key","_indexOf","_keyIterator","coll","len","keys","_restParam","func","startIndex","max","rest","_withoutIndex","value","_eachOfLimit","limit","nextKey","done","running","errored","replenish","doParallel","eachOf","doParallelLimit","doSeries","eachOfSeries","_asyncMap","eachfn","_filter","sort","_reject","cb","_createTester","check","getResult","iteratee","_","_findGetResult","_parallel","tasks","task","_concat","y","concat","_queue","worker","concurrency","payload","_insert","q","pos","started","idle","setImmediate","drain","unshift","saturated","process","_next","workers","removed","workersList","splice","empty","paused","kill","pause","resume","resumeCount","min","w","_console_fn","error","_times","mapper","_applyEach","fns","go","that","pop","ensureAsync","innerArgs","sync","previous_async","root","self","global","noConflict","_toString","isArray","_isObject","k","hasOwnProperty","_setImmediate","_delay","setTimeout","nextTick","forEach","each","forEachSeries","eachSeries","forEachLimit","eachLimit","forEachOf","completed","iter","forEachOfSeries","iterate","forEachOfLimit","eachOfLimit","mapSeries","mapLimit","inject","foldl","reduce","foldr","reduceRight","reversed","reverse","transform","select","filter","selectLimit","filterLimit","selectSeries","filterSeries","reject","rejectLimit","rejectSeries","any","some","someLimit","all","every","everyLimit","detect","detectSeries","detectLimit","sortBy","comparator","left","right","criteria","auto","addListener","listeners","removeListener","idx","taskComplete","remainingTasks","slice","runningTasks","hasError","ready","requires","listener","taskCallback","dep","safeResults","val","rkey","join","retry","times","parseTimes","acc","parseInt","DEFAULT_TIMES","interval","DEFAULT_INTERVAL","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","retryInterval","opts","attempts","series","waterfall","wrapIterator","next","parallel","parallelLimit","makeCallback","callArgs","concatSeries","whilst","doWhilst","calls","until","doUntil","during","truth","doDuring","queue","items","priorityQueue","_compareTasks","priority","_binarySearch","sequence","compare","beg","end","mid","cargo","dir","memoize","hasher","queues","has","memoized","l","unmemoized","unmemoize","timesSeries","timesLimit","seq","newargs","nextargs","compose","applyEach","applyEachSeries","forever","constant","values","wrapSync","asyncify","e","then","define","amd","url","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","errno","open","send","options","glOptions","ext","canvas","document","createElement","premultipliedAlpha","preserveDrawingBuffer","getContext","getExtension","hasFloat","highp","getShaderPrecisionFormat","FRAGMENT_SHADER","HIGH_FLOAT","hasHighPrecision","precision","passThrough","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","encode_program","transpose_program","reshape_program","POSITION_UNIFORM_NAME","TEXTURE_UNIFORM_NAME","npad","mpad","npad_gl","mpad_gl","pad_out","M_in_gl","N_in_gl","pad_in_gl","fragmentShaderSource","fragmentShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","useProgram","bindVertices","renderer","position","getAttribLocation","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","texCoords","textureCoords","indices","ELEMENT_ARRAY_BUFFER","vertexIndices","Uint16Array","h","texels","PAD_TEMPLATE","rem","createTexture","texImage2D","RGBA","remainder","full_texel_row_len","full_row_texture_width","row_start","last_texel","full_texel_row_end","buffer","BYTES_PER_ELEMENT","texSubImage2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","destTexture","UNSIGNED_BYTE","height","width","viewport","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","rawbuffer","ArrayBuffer","prod","Uint8Array","readPixels","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","run","clearTimeout","Item","fun","title","browser","env","argv","version","versions","on","once","off","removeAllListeners","emit","binding","cwd","chdir","umask"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var globals = require('./lib/globals'),\r\n\tpipeline = require(\"./lib/pipeline\"),\r\n\tSGEMMCalculator = require(\"./lib/sgemmcalculator\"),\r\n\tSAXPYCalculator = require(\"./lib/saxpycalculator\"),\r\n\tSSCALCalculator = require(\"./lib/sscalcalculator\"),\r\n\tSDWNSCalculator = require(\"./lib/sdwnscalculator\"),\r\n\tSCLMPCalculator = require(\"./lib/sclmpcalculator\"),\r\n\ttest = require(\"./lib/test\");\r\n\r\nvar gl = globals.gl,\r\n\tsgemmcalculator = new SGEMMCalculator(gl),\r\n\tsaxpycalculator = new SAXPYCalculator(gl),\r\n\tsscalcalculator = new SSCALCalculator(gl),\r\n\tsdwnscalculator = new SDWNSCalculator(gl),\r\n\tsclmpcalculator = new SCLMPCalculator(gl);\r\n\r\nmodule.exports = {\r\n\t// level one\r\n\t\"saxpy\" : saxpy,\r\n\t\"sscal\" : sscal,   // single precision matrix scale\r\n\t// level two\r\n\t// level three\r\n\t\"sgemm\" : sgemm,   // single precision generalized matrix multiply\r\n\t// extra\r\n\t\"sstd\" : sstd,     // single precision Standard Score normalization\r\n\t\"sdwns\": sdwns,\r\n\t\"sclmp\": sclmp,\r\n\t// pipeline\r\n\t\"pipeline\" : pipeline,\r\n\t// internals\r\n\t\"gpu\" : {\t\"gl\": gl,\r\n\t \t\t\t\"sgemm\": pipeline.sgemmcalculator.calculate.bind(pipeline.sgemmcalculator),\r\n\t\t\t\t\"sscal\" : pipeline.sscalcalculator.calculate.bind(pipeline.sscalcalculator),\r\n\t\t\t\t\"sclmp\" : pipeline.sclmpcalculator.calculate.bind(pipeline.sclmpcalculator),\r\n\t\t\t\t\"sdwns\" : pipeline.sdwnscalculator.calculate.bind(pipeline.sdwnscalculator),\r\n\t\t\t\t\"encode\" : gl.encode.bind(gl)\r\n\t\t\t},\r\n\t\"util\" : { \"fromArray\" : fromArray, \"transpose\" : transpose},\r\n\t\"test\" : test\r\n};\r\n\r\n\r\n/* Wrap the GL calculation object in a (relatively) user friendly function that\r\n\taccepts TypedArrays\r\n\r\n\t* convert the data to (padded) textures in GPU memory\r\n\t* execute calculation\r\n\t* read result into an array, and return\r\n */\r\nfunction sgemm(M, N, K, alpha, A, B, beta, C){\r\n\r\n\tif(C != null && C.length != N){\r\n\t\tthrow new Error(\"Only vector C with length matching rows in A is currently supported.\");\r\n\t}\r\n\r\n\t// pack each matrix into a single RGBA texel array, with the second transposed\r\n\tvar texels0 = A,\r\n\t\ttexels1,\r\n\t\ttexels2 = C;\r\n\r\n\r\n\ttexels1 = transpose(K, N, B);\r\n\r\n\t// create input textures from data\r\n\tvar texture0 = gl.createDataTexture(M, K, texels0);\r\n\tvar texture1 = gl.createDataTexture(N, K, texels1);\r\n\tvar texture2 = null;\r\n\tif(texels2 != null){\r\n\t\ttexture2 = gl.createDataTexture(1, N, texels2);\r\n\t}\r\n\r\n\tvar texture3 = gl.createOutputTexture(M, N);\r\n\r\n\tsgemmcalculator.calculate(M, N, K, alpha, texture0, texture1, beta, texture2, texture3);\r\n\r\n\t// retrieve data\r\n\trawBuffer = gl.readData(M, N);\r\n\r\n\t// clean up\r\n\tgl.context.deleteTexture(texture0);\r\n\tgl.context.deleteTexture(texture1);\r\n\tif(texture2 != null){\r\n\t\tgl.context.deleteTexture(texture2);\r\n\t}\r\n\tgl.context.deleteTexture(texture3);\r\n\r\n\t// return result\r\n\treturn new Float32Array(rawBuffer);\r\n\r\n}\r\n\r\nfunction saxpy(N, a, X, Y){\r\n\r\n\tvar rawBuffer;\r\n\r\n\r\n\tvar texels0 = X,\r\n\t\ttexels1;\r\n\r\n\t// TODO: special shader for constant Y\r\n\tif(isFloat32Array(Y)){\r\n\t\ttexels1 = Y;\r\n\t} else {\r\n\t\ttexels1 = new Float32Array(N);\r\n\t\ttexels1.fill(Y);\r\n\t}\r\n\r\n\t// create input textures from data\r\n\tvar texture0 = gl.createDataTexture(1, N, texels0);\r\n\tvar texture1 = gl.createDataTexture(1, N, texels1);\r\n\r\n\tvar texture3 = gl.createOutputTexture(1, N);\r\n\r\n\tsaxpycalculator.calculate(N, a, texture0, texture1, texture3);\r\n\r\n\t// retrieve data\r\n\trawBuffer = gl.readData(1, N);\r\n\r\n\t// clean up\r\n\tgl.context.deleteTexture(texture0);\r\n\tgl.context.deleteTexture(texture1);\r\n\tgl.context.deleteTexture(texture3);\r\n\r\n\t// return result\r\n\treturn new Float32Array(rawBuffer);\r\n\r\n}\r\n\r\nfunction isFloat32Array(obj){\r\n\treturn Object.prototype.toString.call(obj) === \"[object Float32Array]\";\r\n}\r\n/* a more general version of the BLAS Level 1 scale, that works on matrices\r\n   and includes an elementwise scalar addition\r\n\r\n   a * X + b\r\n\r\n   a - multiplicative scalar\r\n   b - additive scalar\r\n   X - matrix (M x N)\r\n\r\n   to get the standard BLAS scal set M = 1 and b = 0\r\n\r\n   this function is generally only cost effective to use in a pipeline\r\n*/\r\nfunction sscal(M, N, a, b, X){\r\n\r\n\tvar rawBuffer;\r\n\r\n\tvar texels0 = X;\r\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\r\n\r\n\tvar texture3 = gl.createOutputTexture(M, N);\r\n\r\n\tsscalcalculator.calculate(M, N, a, b, texture0, texture3);\r\n\r\n\t// retrieve data\r\n\trawBuffer = gl.readData(M, N);\r\n\r\n\t// clean up\r\n\tgl.context.deleteTexture(texture0);\r\n\tgl.context.deleteTexture(texture3);\r\n\r\n\t// return result\r\n\treturn new Float32Array(rawBuffer);\r\n}\r\n\r\n/* Calculate the Standard Score normalization (subtract mean\r\n   ,divide by standard deviation).\r\n */\r\nfunction sstd(M, N, mu, sigma, X){\r\n\r\n\tvar rawBuffer;\r\n\r\n\tvar texels0 = X;\r\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\r\n\r\n\tvar texture3 = gl.createOutputTexture(M, N);\r\n\r\n\t// adjust the parameters (for inverse) and call the standard score normalization\r\n\tsscalcalculator.calculate(M, N, 1.0/sigma, -1.0 * mu/sigma, texture0, texture3);\r\n\r\n\t// retrieve data\r\n\trawBuffer = gl.readData(M, N);\r\n\r\n\t// clean up\r\n\tgl.context.deleteTexture(texture0);\r\n\tgl.context.deleteTexture(texture3);\r\n\r\n\t// return result\r\n\treturn new Float32Array(rawBuffer);\r\n}\r\n\r\n/* downsample an image (taking the max) for Pooling\r\n\r\n\tM - rows in input\r\n\tN - columns in input\r\n\tc - channels in input\r\n\tfactor - the downsample factor (width of patch to sample)\r\n\tstride - width between pooling regions\r\n\tX - input image\r\n */\r\nfunction sdwns(M, N, channels, factor, stride, X){\r\n\r\n\r\n\tvar texels0 = X;\r\n\r\n\tvar texture0 = gl.createDataTexture(M, N * channels, X);\r\n\r\n\tvar N_out = Math.floor((N - factor) / stride) + 1;\r\n\tvar M_out = Math.floor((M - factor) / stride) + 1;\r\n\r\n\tvar texture3 = gl.createOutputTexture(M_out, N_out * channels);\r\n\r\n\tsdwnscalculator.calculate(M, N, channels, factor, stride, texture0, texture3);\r\n\r\n\t// retrieve data\r\n\trawBuffer = gl.readData(M_out, N_out * channels);\r\n\r\n\t// clean up\r\n\tgl.context.deleteTexture(texture0);\r\n\tgl.context.deleteTexture(texture3);\r\n\r\n\t// return result\r\n\treturn new Float32Array(rawBuffer);\r\n}\r\n/*  Elementwise clamp function for matrices on the interval [a, b]. Can also be\r\n\tused for min or max, by passing Number.MIN_VALUE for the first parameter and\r\n\tNumber.MAX_VALUE for the second parameter, respectively.\r\n\r\n\tPassing `null` for either of these parameters will default to it's\r\n\trespective min or max value.\r\n\r\n\tM - number of rows in X\r\n\tN - number of columns in X\r\n\ta - lower bound (inclusize)\r\n\tb - upper bound (inclusive)\r\n\tX - matrix\r\n\r\n   to get the standard BLAS scal set M = 1 and b = 0\r\n\r\n   this function is generally only cost effective to use in a pipeline\r\n*/\r\nfunction sclmp(M, N, a, b, X){\r\n\r\n\ta = (a != null) ? a : Number.MIN_VALUE;\r\n\tb = (b != null) ? b : Number.MAX_VALUE;\r\n\r\n\tvar rawBuffer;\r\n\r\n\tvar texels0 = X;\r\n\tvar texture0 = gl.createDataTexture(M, N, texels0);\r\n\r\n\tvar texture3 = gl.createOutputTexture(M, N);\r\n\r\n\tsclmpcalculator.calculate(M, N, a, b, texture0, texture3);\r\n\r\n\t// retrieve data\r\n\trawBuffer = gl.readData(M, N);\r\n\r\n\t// clean up\r\n\tgl.context.deleteTexture(texture0);\r\n\tgl.context.deleteTexture(texture3);\r\n\r\n\t// return result\r\n\treturn new Float32Array(rawBuffer);\r\n}\r\n/*\r\nfunction saxpy(n, a, x, y){\r\n\tvar i = 0,\r\n\t\tresult = new Float32Array(n);\r\n\r\n\t// assert n = x.length\r\n\t// assert a is scalar\r\n\t// assert x is Float32Array\r\n\r\n\tif(isNumeric(y)){\r\n\t\t// shortcut for scalar y\r\n\t\tfor(; i < n; i++){\r\n\t\t\tresult[i] = a * x[i] + y;\r\n\t\t}\r\n\t} else {\r\n\r\n\t\tfor(; i < n; i++){\r\n\t\t\tresult[i] = a * x[i] + y[i];\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}*/\r\n\r\n// add a String.format method, if none exists\r\nif (!String.prototype.format) {\r\n  String.prototype.format = function() {\r\n\tvar args = arguments;\r\n\treturn this.replace(/{(\\d+)}/g, function(match, number) {\r\n\t  return typeof args[number] != 'undefined'\r\n\t\t? args[number]\r\n\t\t: match\r\n\t  ;\r\n\t});\r\n  };\r\n}\r\n\r\nfunction isNumeric( obj ) { return (obj - parseFloat( obj ) + 1) >= 0; }\r\n\r\n/* create a typed array from a 2D javascript array */\r\nfunction fromArray(array, type, tranpose) {\r\n\tvar shape = [],\r\n\t\t\tdata,\r\n\t\t\tc;   // number of columns\r\n\r\n\tif(!tranpose){\r\n\t\tshape[0] = array.length;\r\n\t\tshape[1] = array[0].length;\r\n\t} else {\r\n\t\tshape[1] = array.length;\r\n\t\tshape[0] = array[0].length;\r\n\t}\r\n\tc = shape[1];\r\n\r\n\ttype = type || Float32Array;\r\n\r\n\tdata = new type(shape[0]*shape[1]);\r\n\r\n\tfor (var ii = 0; ii < shape[0]; ++ii)\r\n\t\tfor (var jj = 0; jj < shape[1]; ++jj)\r\n\t\tif(!tranpose)\r\n\t\t\tdata[ii*c + jj] = array[ii][jj];\r\n\t\telse\r\n\t\t\tdata[ii*c + jj] = array[jj][ii];\r\n\r\n\treturn data;\r\n};\r\n\r\n// tranpose a typed array in row major order, with the given row and column\r\n// numers\r\nfunction transpose(r, c, typedArray){\r\n\tvar result = new typedArray.constructor(r*c);\r\n\r\n\tfor(var i = 0; i < r; i++){\r\n\t\tfor(var j = 0; j < c; j++){\r\n\t\t\tresult[j * r + i] = typedArray[i * c + j];\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n","var WebGL = require(\"./webgl\");\r\n\r\nvar gl = new WebGL();\r\n\r\nmodule.exports = {\r\n\t\"gl\" : gl\r\n}\r\n","var globals = require('./globals'),\r\n\tSGEMMCalculator = require(\"./sgemmcalculator\"),\r\n\tSAXPYCalculator = require(\"./saxpycalculator\"),\r\n\tSSCALCalculator = require(\"./sscalcalculator\"),\r\n\tSDWNSCalculator = require(\"./sdwnscalculator\"),\r\n\tSCLMPCalculator = require(\"./sclmpcalculator\"),\r\n\tTensor = require('./tensor');\r\n\r\n\r\nvar gl = globals.gl,\r\n\tsgemmcalculator = new SGEMMCalculator(gl, false),\r\n\tsaxpycalculator = new SAXPYCalculator(gl, false),\r\n\tsscalcalculator = new SSCALCalculator(gl, false),\r\n\tsdwnscalculator = new SDWNSCalculator(gl, false),\r\n\tsclmpcalculator = new SCLMPCalculator(gl, false);\r\n\r\nmodule.exports = {\r\n\t\"Tensor\" : Tensor,\r\n\t\"sscal\" : sscal,\r\n\t\"sgemm\" : sgemm,\r\n\t\"sdwns\" : sdwns,\r\n\t\"sclmp\" : sclmp,\r\n\r\n\t\"sgemmcalculator\" : sgemmcalculator,\r\n\t\"saxpycalculator\" : saxpycalculator,\r\n\t\"sscalcalculator\" : sscalcalculator,\r\n\t\"sdwnscalculator\" : sdwnscalculator,\r\n\t\"sclmpcalculator\" : sclmpcalculator\r\n}\r\n\r\n/* scale (and optionally offset) a Tensor, elementwise\r\n */\r\nfunction sscal(a, b, t0){\r\n\r\n\tvar M = t0.shape[0],\r\n\t\tN = t0.shape[1];\r\n\r\n\t// create an empty output Tensor\r\n\tvar tOut = new Tensor([M, N], null);\r\n\r\n\tsscalcalculator.calculate(M, N, a, b, t0.texture, tOut.texture);\r\n\r\n\treturn tOut;\r\n}\r\n\r\n/* matrix multiply on t0 and t1 with additive t2. t1 must be transposed\r\n */\r\nfunction sgemm(alpha, t0, t1, beta, t2){\r\n\r\n\tif(t1.shape[1] !== t0.shape[1])\r\n\t\tthrow new Error(\"Second dimension must be of same size for input Tensors (second Tensor is transposed).\");\r\n\r\n\tvar M = t0.shape[0],\r\n\t\tN = t1.shape[0],\r\n\t\tK = t0.shape[1];\r\n\r\n\tvar texture2;\r\n\r\n\tif(t2){\r\n\t\ttexture2 = t2.texture;\r\n\t} else {\r\n\t\ttexture2 = null;\r\n\t}\r\n\r\n\t// create an empty output Tensor\r\n\tvar tOut = new Tensor([M, N], null);\r\n\r\n\tsgemmcalculator.calculate(M, N, K, alpha, t0.texture, t1.texture, beta, texture2, tOut.texture);\r\n\r\n\treturn tOut;\r\n}\r\n\r\nfunction sdwns(channels, factor, stride, t0){\r\n\r\n\tif(t0.shape[1] % channels !== 0)\r\n\t\tthrow new Error(\"Second dimension of tensor must be a multiple of channels\");\r\n\r\n\tvar M = t0.shape[0],\r\n\t\tN = t0.shape[1] / channels;\r\n\r\n\tvar M_out = Math.floor((M - factor) / stride) + 1;\r\n\tvar N_out = Math.floor((N - factor) / stride) + 1;\r\n\r\n\t// create an empty output Tensor\r\n\tvar tOut = new Tensor([M_out, N_out * channels], null);\r\n\r\n\tsdwnscalculator.calculate(M, N, channels, factor, stride, t0.texture, tOut.texture);\r\n\r\n\treturn tOut;\r\n}\r\n\r\nfunction sclmp(a, b, t0){\r\n\r\n\ta = (a != null) ? a : Number.MIN_VALUE;\r\n\tb = (b != null) ? b : Number.MAX_VALUE;\r\n\r\n\tvar M = t0.shape[0],\r\n\t\tN = t0.shape[1];\r\n\r\n\t// create an empty output Tensor\r\n\tvar tOut = new Tensor([M, N], null);\r\n\r\n\tsclmpcalculator.calculate(M, N, a, b, t0.texture, tOut.texture);\r\n\r\n\treturn tOut;\r\n}\r\n","var async = require('async'),\r\n\tloader = require('floader'); // browserify aware file loader (xhr in browser)\r\n\r\n/* Collection of helper methods for testing numerical computation\r\n */\r\ntest = {};\r\n\r\n/* Check all entries in two TypedArrays of identical length for approximate\r\n\tequality.\r\n\tIf the following equation is element-wise true, returns true\r\n\r\n\tabsolute(a - b) <= (atol + rtol * absolute(b))\r\n\r\n\tfrom numpy.allclose\r\n */\r\ntest.allclose = function(a, b, RTOL, ATOL){\r\n\tRTOL= RTOL || 1e-05;  // for 32 bit precision: 1e-06\r\n\tATOL= ATOL || 1e-08;\r\n\r\n\tif(a.length != b.length){\r\n\t\tconsole.log(\"lengths not equal: \" + a.length + \", \" + b.length);\r\n\t\treturn {\"result\" : false, \"index\": null};\r\n\t}\r\n\r\n\tvar result;\r\n\tfor(var i = 0; i < a.length; i++){\r\n\r\n\t\tresult = Math.abs(a[i] - b[i]) <= ATOL + RTOL * Math.abs(b[i]);\r\n\r\n\t\tif(!result) {\r\n\t\t\treturn {\"result\": false, \"index\": i};\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\"result\": true, \"index\": i};\r\n};\r\n\r\ntest.randomArray = function(N, M){\r\n\r\n\tvar data = [];\r\n\r\n\tfor(var i = 0; i < N; i++){\r\n\t\tvar row = [];\r\n\t\tfor(var j = 0; j < M; j++){\r\n\t\t\trow[j] = Math.random() / Math.sqrt(N);\r\n\t\t}\r\n\t\tdata.push(row);\r\n\t}\r\n\r\n\treturn data;\r\n};\r\n// pad rows with zeros\r\ntest.padData = function(M, N, pad, data){\r\n\r\n\tvar padded = new Float32Array(M * (N + pad)); // new array of specified length filled with zeros\r\n\tfor(var i = 0; i < M; i++){\r\n\t\tpadded.set(data.subarray(i * N, (i + 1) * N), i * (N + pad));\r\n\t}\r\n\treturn padded;\r\n}\r\n\r\n\r\n/* Load test matrices from JSON data, works in a browser (with XHR)\r\n\tassumes three files 'a.json', 'b.json' and 'c.json' in nested Array format.\r\n\r\n callback = function(err, a, b, c)\r\n */\r\ntest.load = function(testDirectory, matrixFiles, callback){\r\n\r\n\t// array of paths to matrix data files for current test\r\n\tvar testFiles = matrixFiles.map(function(item){ return testDirectory + item;});\r\n\r\n\t//console.log(testFiles);\r\n\tasync.map(testFiles, loader.load,\r\n\t\tfunction(err, results){\r\n\r\n\t\t\tif(err) return callback(err);\r\n\r\n\t\t\t// results contains three strings.\r\n\t\t\t// each string contains the contents of a file\r\n\t\t\t// files contain JSON describing a matrix (2D array)\r\n\t\t\tvar matrices = results.map(JSON.parse);\r\n\r\n\t\t\tcallback(err, matrices);\r\n\t\t}\r\n\t);\r\n};\r\n\r\ntest.assert = {};\r\n\r\n/* create a tape compatible assert */\r\ntest.assert.allclose = function(t, a, b, msg, RTOL, ATOL) {\r\n\r\n\tvar ok = test.allclose(a, b, RTOL, ATOL),\r\n\t\tactual = \"[\",\r\n\t\texpected = \"[\";\r\n\r\n\tif(!ok.result){\r\n\r\n\t\tif(ok.index > 1){\r\n\t\t\tactual += \"..., \";\r\n\t\t\texpected += \"..., \";\r\n\t\t}\r\n\t\tif(ok.index > 0){\r\n\t\t\tactual += a[ok.index - 1] + \", \";\r\n\t\t\texpected += b[ok.index - 1] + \", \";\r\n\t\t}\r\n\t\tactual += \"-->\";\r\n\t\texpected += \"-->\";\r\n\r\n\t\tfor(var i = ok.index; i < ok.index + 4 && i < a.length; i++ ){\r\n\t\t\tactual += a[i] + \", \";\r\n\t\t\texpected += b[i] + \", \";\r\n\t\t}\r\n\t\tif(i < a.length){\r\n\t\t\tactual += \"...]\";\r\n\t\t\texpected += \"...]\";\r\n\t\t} else {\r\n\t\t\tactual += \"]\";\r\n\t\t\texpected += \"]\";\r\n\t\t}\r\n\t\tmsg = msg || 'should be allclose at ' + ok.index;\r\n\t}\r\n\r\n    t._assert(ok.result, {\r\n        message : msg || 'should be allclose',\r\n        operator : 'allclose',\r\n        actual : actual,\r\n        expected : expected,\r\n        extra : null\r\n    });\r\n}\r\n\r\nmodule.exports = test;\r\n","var WebGL = require('./webgl');\n\n/* A calculator object for the Float texture based AXPY\n\n\ta times X plus Y (AXPY):\n\n\tY = a * X + Y\n\n\twhere X + Y is elementwise matrix addition\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SAXPYCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = standalone || true; // default to standalone mode\n\n\n\tvar s = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\r\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\r\\nuniform sampler2D Y;\\t\\t// texture with data from padded transpose of B\\r\\nuniform int       N;\\n\\nuniform float     a; \\t\\t// coefficient to multiplication\\r\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\r\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\r\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\r\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\r\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\r\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\r\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\r\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\r\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\r\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\r\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\r\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\r\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\r\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\r\\n\\n\\treturn vec4(m3,m2,m1,e);\\n\\n}\\n\\n// select an element from a vector based on index\\r\\nfloat select_index_1604150559(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate. These map directly to input texture space when\\r\\n\\t// the relevant dimensions are the same.\\r\\n \\tfloat row = outTex.y;\\n\\n\\tfloat col = outTex.x;\\n\\n\\t// direct usage of col requires output be padded exactly like input\\r\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\n\\tvec4 y = texture2D( Y, vec2(col, row));\\n\\n\\tvec4 sum_v = (a * x) + y;\\n\\n\\tint channel = int(mod(col * float(N), 4.0 ));\\n\\n\\tfloat sum = select_index_1604150559(sum_v, channel);\\n\\n\\tif (sum == 0.) {\\n\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\n\\t\\treturn;\\n\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\r\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n\\n}\\n\\n\";\n\t//\tp = glslify('./glsl/saxpy/pipeline.glsl');\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SAXPYCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSAXPYCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSAXPYCalculator.TEXTURE_UNIFORM_NAME_1 = \"Y\";\nSAXPYCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSAXPYCalculator.COEFFICIENT_UNIFORM_NAME = \"a\";\n\n\n/* Calculate the AXPY, with the given data.\n\n\tN - number of elements in X and Y\n\ta - scalar coefficient to X\n\tX - left hand vector (texture)\n\tY - right hand vector (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSAXPYCalculator.prototype.calculate = function(N, a, X, Y, out){\n\n\tvar gl = this.webgl.context;\n\n\t/*\n\tvar h1 = M, w1 = K,\n\t\th2 = K, w2 = N;\n\t*/\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SAXPYCalculator.TEXTURE_UNIFORM_NAME_0);\n\tthis.bindInputTexture(Y, gl.TEXTURE1, SAXPYCalculator.TEXTURE_UNIFORM_NAME_1);\n\n\n\tvar pad = this.webgl.getPad(N);\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N + pad, a);\n\n\t// create our destination texture\n\tthis.webgl.bindOutputTexture(1, N + pad, out);\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE1);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSAXPYCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSAXPYCalculator.prototype.bindUniforms = function(N, a) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SAXPYCalculator.LENGTH_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SAXPYCalculator.COEFFICIENT_UNIFORM_NAME);\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1f(a_gl, a);\n\n};\n","var WebGL = require('./webgl');\n\n/*  a more general version of the BLAS Level 1 scale that works on matrices\n    and includes an elementwise scalar addition\n\n    a * X + b\n\n\twhere X is a matrix, a and b are scalars and operations are elementwise\n\n    to get the standard BLAS scal set M = 1 and b = 0\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SSCALCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\tvar s = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\r\\nuniform sampler2D X;\\t\\t// texture with data from padded X\\r\\nuniform int       N;\\t\\t// number of columns\\r\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\r\\nuniform float     b; \\t\\t// additive term\\r\\nuniform float     a; \\t\\t// multiplicative term\\r\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\r\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\r\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\r\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\r\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\r\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\r\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\r\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\r\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\r\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\r\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\r\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\r\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\r\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\r\\n\\n\\treturn vec4(m3,m2,m1,e);\\n\\n}\\n\\n// select an element from a vector based on index\\r\\nfloat select_index_1604150559(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate. These map directly to input texture space when\\r\\n\\t// the relevant dimensions are the same.\\r\\n \\tfloat row = outTex.y;\\n\\n\\tfloat col = outTex.x;\\n\\n\\t// direct usage of col requires output be padded exactly like input\\r\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\n\\tvec4 sum_v = (a * x) + b;\\n\\n\\tint channel = int(mod(col * float(N + pad), 4.0 ));\\n\\n\\tfloat sum = select_index_1604150559(sum_v, channel);\\n\\n\\tif (sum == 0.) {\\n\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\n\\t\\treturn;\\n\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\r\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n\\n}\\n\\n\",\n\t\tp = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\r\\nuniform sampler2D X;\\t\\t// texture with data from padded X\\r\\nuniform int       N;\\t\\t// number of columns\\r\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\r\\nuniform float     b; \\t\\t// additive term\\r\\nuniform float     a; \\t\\t// multiplicative term\\r\\n\\n// set pad values to 0.0, if in padded region of output texture\\r\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\n\\tv.a = 0.0;\\n\\n\\tif(pad == 2){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t} else if(pad == 3){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t\\tv.g = 0.0;\\n\\n\\t}\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate. These map directly to input texture space when\\r\\n\\t// the relevant dimensions are the same.\\r\\n\\tfloat row_t = outTex.y;\\n\\n\\tfloat col_t = outTex.x;\\n\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\r\\n\\n\\t// direct usage of col requires output be padded exactly like input\\r\\n\\tvec4 x = texture2D( X, vec2(col_t, row_t));\\n\\n\\tvec4 sum_v = (a * x) + b;\\n\\n\\t// fix padded region\\r\\n\\tif(pad > 0 && col + 4.0 > float(N) ) {\\n\\n\\t\\tfix_pad_1540259130(sum_v, pad);\\n\\n\\t}\\n\\n\\tgl_FragColor = sum_v;\\n\\n}\\n\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program = this.webgl.createProgram(s);\n\t} else {\n\t\tthis.program = this.webgl.createProgram(p);\n\t}\n}\n\nmodule.exports = SSCALCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSSCALCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\nSSCALCalculator.LENGTH_UNIFORM_NAME = \"N\";\nSSCALCalculator.ADD_UNIFORM_NAME = \"b\";\nSSCALCalculator.MUL_UNIFORM_NAME = \"a\";\n\n/* Elementwise scale and offset a matrix\n\n\tM - number of rows in X\n\tN - number of columns in X\n\ta - scalar coefficient to X\n\tb - scalar offset of X\n\tX - matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n */\nSSCALCalculator.prototype.calculate = function(M, N, a, b, X, out){\n\n\tvar gl = this.webgl.context;\n\n\tvar mod = (N % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = mod == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - mod;\n\n\tthis.webgl.selectProgram(this.program);\n\n\t// create and bind our input texture using matrix data\n\tthis.bindInputTexture(X, gl.TEXTURE0, SSCALCalculator.TEXTURE_UNIFORM_NAME_0);\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, pad, a, b);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + pad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + pad)/ 4, out);\n\t}\n\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\n};\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\ttexture - texture containing the data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSSCALCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/* Set up inputs for the texture shader\n\n */\nSSCALCalculator.prototype.bindUniforms = function(N, pad, a, b) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar N_gl = gl.getUniformLocation(this.program, SSCALCalculator.LENGTH_UNIFORM_NAME),\n\t\tb_gl = gl.getUniformLocation(this.program, SSCALCalculator.ADD_UNIFORM_NAME),\n\t\ta_gl = gl.getUniformLocation(this.program, SSCALCalculator.MUL_UNIFORM_NAME),\n\t\tpad_gl = gl.getUniformLocation(this.program, \"pad\");\n\n\t// bind length of shared dimension\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\tgl.uniform1f(a_gl, a);\n\tgl.uniform1f(b_gl, b);\n\n};\n","var WebGL = require('./webgl');\r\n\r\n/*  Downsample an image (useful in pooling layers).\r\n\r\n\r\n\r\n\twebgl - a weblas.WebGL object\r\n\tstandalone - whether or not to automatically run the floating point encode\r\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\r\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\r\n\r\n\t* uploads and downloads data\r\n\t* executes calculation\r\n */\r\nfunction DownsampleCalculator(webgl, standalone){\r\n\tthis.webgl = webgl,\r\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\r\n\r\n\tvar s = \"#define GLSLIFY 1// TODO: unroll loop for stride == factor and small values (2, 3)\\r\\nprecision highp float;\\n\\nvarying vec2      outTex;  // texture coords of row/column to calculate\\r\\nuniform sampler2D X;       // texture with data from padded A\\r\\nuniform int       factor;  // width of image patch\\r\\nuniform float     stride;  // width between image patches\\r\\nuniform float     C;       // number of channels\\r\\nuniform float     M;\\n\\nuniform float     N;\\n\\nuniform float     N_out;\\n\\nuniform float     M_out;\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\r\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\r\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\r\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\r\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\r\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\r\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\r\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\r\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\r\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\r\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\r\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\r\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\r\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\r\\n\\n\\treturn vec4(m3,m2,m1,e);\\n\\n}\\n\\n// select an element from a vector based on index\\r\\nfloat select_index_1604150559(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate and translate to output pixel space.\\r\\n\\tfloat row = floor(outTex.y * M_out);   // row on output texture (matrix space)\\r\\n\\tfloat col = floor(outTex.x * N_out); // column on output texture (matrix space)\\r\\n\\tfloat vcol = floor(col / C);   // virtual column on output texture (matrix space)\\r\\n\\tfloat vchannel = floor(mod(col, C)); // virtual channel on output texture\\r\\n\\n\\tconst float min = -1.0e+08;\\n\\n\\tvec4 currentMax = vec4(min, min, min, min);\\n\\n\\tfloat deltaY = 1.0/M;\\n\\n\\tfloat deltaX = 1.0/N;\\n\\n\\tfloat y = ((row * stride) + 0.5)*deltaY; // texture position of input row\\r\\n\\tfloat x;\\n\\n\\tfloat z = vchannel * deltaX;\\n\\n\\tfor (int i = 0; i < 100; i += 1) {\\n\\n\\t\\tif (i >= factor) {\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t\\tx = ((vcol * stride * C) + 0.5) * deltaX; // texture position of input column\\r\\n\\n\\t\\tfor (int j = 0; j < 100; j += 1) {\\n\\n\\t\\t\\tif (j >= factor) {\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec2 coords = vec2(x + z, y);\\n\\n\\t\\t\\tvec4 x_v = texture2D(X, coords);\\n\\n\\t\\t\\tcurrentMax = max(currentMax, x_v);\\n\\n\\t\\t\\tx += (deltaX * C);\\n\\n\\t\\t}\\n\\n\\t\\ty += deltaY;\\n\\n\\t}\\n\\n\\tint chan = int(mod(outTex.x * N_out, 4.0 ));\\n\\n\\tfloat val = select_index_1604150559(currentMax, int(chan));\\n\\n\\tif (val == 0.) {\\n\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\n\\t\\treturn;\\n\\n\\t}\\n\\n\\tgl_FragColor = encode_float_1540259130(val);\\n\\n}\\n\\n\";\r\n\t\tp = \"#define GLSLIFY 1// TODO: unroll loop for stride == factor and small values (2, 3)\\r\\nprecision highp float;\\n\\nvarying vec2      outTex;  // texture coords of row/column to calculate\\r\\nuniform sampler2D X;       // texture with data from padded A\\r\\nuniform int       factor;  // width of image patch\\r\\nuniform float     stride;  // width between image patches\\r\\nuniform float     C;       // number of channels\\r\\nuniform float     M;\\n\\nuniform float     N;\\n\\nuniform float     N_out;\\n\\nuniform float     M_out;\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate and translate to output pixel space.\\r\\n\\tfloat row = floor(outTex.y * M_out);   // row on output texture (pixel space)\\r\\n\\tfloat col = floor(outTex.x * N_out); // column on output texture (matrix space)\\r\\n\\tfloat vcol = floor(col / C);   // virtual column on output texture (matrix space)\\r\\n\\tfloat vchannel = floor(mod(col, C)); // virtual channel on output texture\\r\\n\\n\\tconst float min = -1.0e+08;\\n\\n\\tvec4 currentMax = vec4(min, min, min, min);\\n\\n\\tfloat deltaY = 1.0/M;\\n\\n\\tfloat deltaX = 1.0/N;\\n\\n\\tfloat y = ((row * stride) + 0.5)*deltaY; // texture position of input row\\r\\n\\tfloat x;\\n\\n\\tfloat z = vchannel * deltaX;\\n\\n\\tfor (int i = 0; i < 100; i += 1) {\\n\\n\\t\\tif (i >= factor) {\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\t}\\n\\n\\t\\tx = ((vcol * stride * C) + 0.5) * deltaX; // texture position of input column\\r\\n\\n\\t\\tfor (int j = 0; j < 100; j += 1) {\\n\\n\\t\\t\\tif (j >= factor) {\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvec2 coords = vec2(x + z, y);\\n\\n\\t\\t\\tvec4 x_v = texture2D(X, coords);\\n\\n\\t\\t\\tcurrentMax = max(currentMax, x_v);\\n\\n\\t\\t\\tx += (deltaX * C);\\n\\n\\t\\t}\\n\\n\\t\\ty += deltaY;\\n\\n\\t}\\n\\n\\tgl_FragColor = currentMax;\\n\\n}\\n\\n\";\r\n\r\n\t// create the webgl shader program for this calculation\r\n\t// based on the specific fragment shader for this calculation\r\n\t// and the generic pass through shader\r\n\tif(this.standalone){\r\n\t\tthis.program = this.webgl.createProgram(s);\r\n\t} else {\r\n\t\tthis.program = this.webgl.createProgram(p);\r\n\t}\r\n}\r\n\r\nmodule.exports = DownsampleCalculator;\r\n\r\n/* Names of the uniforms (variables) used in the shader program passed in on\r\n   each calculation.\r\n */\r\nDownsampleCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\r\nDownsampleCalculator.INPUT_ROW_COUNT_UNIFORM_NAME = \"M\";\r\nDownsampleCalculator.INPUT_COLUMN_COUNT_UNIFORM_NAME = \"N\";\r\nDownsampleCalculator.OUTPUT_ROW_COUNT_UNIFORM_NAME = \"M_out\";\r\nDownsampleCalculator.OUTPUT_COLUMN_COUNT_UNIFORM_NAME = \"N_out\";\r\nDownsampleCalculator.FACTOR_UNIFORM_NAME = \"factor\";\r\nDownsampleCalculator.STRIDE_UNIFORM_NAME = \"stride\";\r\nDownsampleCalculator.CHANNEL_COUNT_UNIFORM_NAME = \"C\";\r\n\r\n\r\n/* Downsample (pool) the input using the maximum for each channel.\r\n\r\n\tM - rows in X\r\n\tN - columns in X\r\n\tc - (channels / 4) in X\r\n\tfactor - the number of pixels (width and height) to combine\r\n\tstride - amount between groups of pixels\r\n\tX - input matrix (texture)\r\n\tout - output (texture)\r\n\r\n  How this works:\r\n\r\n  1. Activate our shader program\r\n  2. Bind input textures\r\n  3. Set shader program parameters\r\n  4. Bind output texture\r\n  5. Activate calculation with `drawElements`\r\n\r\n */\r\nDownsampleCalculator.prototype.calculate = function(M, N, channels, factor, stride, X, out){\r\n\r\n\tif(channels % WebGL.COMPONENTS_PER_TEXEL != 0){\r\n\t\tthrow new Error(\"Channel count must be a multiple of \" + WebGL.COMPONENTS_PER_TEXEL);\r\n\t}\r\n\tvar gl = this.webgl.context;\r\n\r\n    var N_out = (Math.floor((N - factor) / stride) + 1) * channels;\r\n    var M_out = Math.floor((M - factor) / stride) + 1;\r\n\r\n\tthis.webgl.selectProgram(this.program);\r\n\r\n\t// create and bind our input texture using matrix data\r\n\tthis.bindInputTexture(X, gl.TEXTURE0, DownsampleCalculator.TEXTURE_UNIFORM_NAME_0);\r\n\r\n\r\n\t// set the data specific variables in our shader program\r\n\tthis.bindUniforms(M, N * channels, M_out, N_out, factor, stride, channels);\r\n\r\n\t// create our destination texture\r\n\tif(this.standalone){\r\n\t\tthis.webgl.bindOutputTexture(M_out, N_out, out);\r\n\t} else {\r\n\t\tthis.webgl.bindOutputTexture(M_out, N_out/WebGL.COMPONENTS_PER_TEXEL, out);\r\n\t}\r\n\r\n\r\n\t// initiate calculation\r\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\r\n\r\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\r\n\r\n};\r\n\r\n/* Create a texture from the given texel data and bind it to our shader program.\r\n\r\n\ttexture - texture containing input values to bind\r\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\r\n\tname - the uniform name to associate with (must match shader program)\r\n\r\n\tmust compile program (with createProgram) first\r\n*/\r\nDownsampleCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\r\n\tvar gl = this.webgl.context,\r\n\t\tprogram = this.program;\r\n\r\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\r\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\r\n\r\n\tvar sampler = gl.getUniformLocation(program, name);\r\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\r\n\r\n};\r\n\r\n/* Set up inputs for the texture shader\r\n\r\n */\r\nDownsampleCalculator.prototype.bindUniforms = function(M, N, M_out, N_out, factor, stride, c) {\r\n\tvar gl = this.webgl.context;\r\n\r\n\t// get var locations\r\n\tvar M_gl = gl.getUniformLocation(this.program, DownsampleCalculator.INPUT_ROW_COUNT_UNIFORM_NAME),\r\n\t\tN_gl = gl.getUniformLocation(this.program, DownsampleCalculator.INPUT_COLUMN_COUNT_UNIFORM_NAME),\r\n\t\tM_out_gl = gl.getUniformLocation(this.program, DownsampleCalculator.OUTPUT_ROW_COUNT_UNIFORM_NAME),\r\n\t\tN_out_gl = gl.getUniformLocation(this.program, DownsampleCalculator.OUTPUT_COLUMN_COUNT_UNIFORM_NAME),\r\n\t\tfactor_gl = gl.getUniformLocation(this.program, DownsampleCalculator.FACTOR_UNIFORM_NAME),\r\n\t\tstride_gl = gl.getUniformLocation(this.program, DownsampleCalculator.STRIDE_UNIFORM_NAME),\r\n\t\tchannel_count_gl = gl.getUniformLocation(this.program, DownsampleCalculator.CHANNEL_COUNT_UNIFORM_NAME);\r\n\r\n\t// bind length of shared dimension\r\n\tgl.uniform1f(M_gl, M);\r\n\tgl.uniform1f(N_gl, N);\r\n\tgl.uniform1f(M_out_gl, M_out);\r\n\tgl.uniform1f(N_out_gl, N_out);\r\n\tgl.uniform1i(factor_gl, factor);\r\n\tgl.uniform1f(stride_gl, stride);\r\n\tgl.uniform1f(channel_count_gl, c);\r\n\r\n};\r\n","var WebGL = require('./webgl');\r\n\r\n/*  Elementwise clamp function for matrices on the interval [a, b]. Can also be\r\n\tused for min or max, by passing Number.MIN_VALUE for the first parameter and\r\n\tNumber.MAX_VALUE for the second parameter, respectively.\r\n\r\n\tPassing `null` for either of these parameters will default to it's\r\n\trespective min or max value.\r\n\r\n\tmax(a, min(b, x)) for each x in X\r\n\r\n\twhere X is a matrix, a and b are scalars\r\n\r\n\r\n\twebgl - a weblas.WebGL object\r\n\tstandalone - whether or not to automatically run the floating point encode\r\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\r\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\r\n\r\n\t* uploads and downloads data\r\n\t* executes calculation\r\n */\r\nfunction SCLMPCalculator(webgl, standalone){\r\n\tthis.webgl = webgl,\r\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\r\n\r\n\tvar s = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\r\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\r\\nuniform int       N;\\t\\t// number of columns\\r\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\r\\nuniform float     a; \\t\\t// lower bound\\r\\nuniform float     b; \\t\\t// upper bound\\r\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\r\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\r\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\r\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\r\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\r\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\r\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\r\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\r\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\r\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\r\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\r\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\r\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\r\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\r\\n\\n\\treturn vec4(m3,m2,m1,e);\\n\\n}\\n\\n// select an element from a vector based on index\\r\\nfloat select_index_1604150559(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate. These map directly to input texture space when\\r\\n\\t// the relevant dimensions are the same.\\r\\n\\tfloat row = outTex.y;\\n\\n\\tfloat col = outTex.x;\\n\\n\\t// return 0.0 if in padded region of output texture\\r\\n\\tif(col * float(N + pad) > float(N) ) {\\n\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\n\\t\\treturn;\\n\\n\\t}\\n\\n\\t// direct usage of col requires output be padded exactly like input\\r\\n\\tvec4 x = texture2D( X, vec2(col, row));\\n\\n\\tvec4 val = clamp(x, a, b);\\n\\n\\t// select and output channel (standalone version only)\\r\\n\\tint channel = int(mod(col * float(N + pad), 4.0));\\n\\n\\tfloat sum = select_index_1604150559(val, channel);\\n\\n\\tif (sum == 0.) {\\n\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\n\\t\\treturn;\\n\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\r\\n\\tgl_FragColor = encode_float_1540259130(sum);\\n\\n}\\n\\n\",\r\n\t\tp = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D X;\\t\\t// texture with data from padded A\\nuniform int       N;\\t\\t// number of columns\\nuniform int       pad;\\t\\t// additional columns to nearest multiple of four\\nuniform float     a; \\t\\t// lower bound\\nuniform float     b; \\t\\t// upper bound\\n\\n// set pad values to 0.0, if in padded region of output texture\\r\\nvoid fix_pad_1540259130(inout vec4 v, int pad){\\n\\n\\tv.a = 0.0;\\n\\n\\tif(pad == 2){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t} else if(pad == 3){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t\\tv.g = 0.0;\\n\\n\\t}\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\n\\t// direct usage of col requires output be padded exactly like input\\n\\tvec4 x = texture2D( X, vec2(col_t, row_t));\\n\\tvec4 val_v = clamp(x, a, b);\\n\\n\\t// is last element in pixel past row length?\\n\\tif(pad > 0 && (col + 4.0) > float(N) ) {\\n\\t\\t// fix elements in padded region\\n\\t\\tfix_pad_1540259130(val_v, pad);\\n\\t}\\n\\n\\tgl_FragColor = val_v;\\n}\\n\";\r\n\r\n\t// create the webgl shader program for this calculation\r\n\t// based on the specific fragment shader for this calculation\r\n\t// and the generic pass through shader\r\n\tif(this.standalone){\r\n\t\tthis.program = this.webgl.createProgram(s);\r\n\t} else {\r\n\t\tthis.program = this.webgl.createProgram(p);\r\n\t}\r\n}\r\n\r\nmodule.exports = SCLMPCalculator;\r\n\r\n/* Names of the uniforms (variables) used in the shader program passed in on\r\n   each calculation.\r\n */\r\nSCLMPCalculator.TEXTURE_UNIFORM_NAME_0 = \"X\";\r\nSCLMPCalculator.LENGTH_UNIFORM_NAME = \"N\";\r\nSCLMPCalculator.LOWER_UNIFORM_NAME = \"a\";\r\nSCLMPCalculator.UPPER_UNIFORM_NAME = \"b\";\r\n\r\n\r\n/* Elementwise clamp a matrix to the interval [a, b]\r\n\r\n\tM - number of rows in X\r\n\tN - number of columns in X\r\n\ta - lower bound (inclusize)\r\n\tb - upper bound (inclusive)\r\n\tX - matrix (texture)\r\n\tout - output (texture)\r\n\r\n  How this works:\r\n\r\n  1. Activate our shader program\r\n  2. Bind input textures\r\n  3. Set shader program parameters\r\n  4. Bind output texture\r\n  5. Activate calculation with `drawElements`\r\n\r\n */\r\nSCLMPCalculator.prototype.calculate = function(M, N, a, b, X, out){\r\n\r\n\ta = (a != null) ? a : Number.MIN_VALUE;\r\n\tb = (b != null) ? b : Number.MAX_VALUE;\r\n\r\n\tvar gl = this.webgl.context;\r\n\r\n\tthis.webgl.selectProgram(this.program);\r\n\r\n\t// create and bind our input texture using matrix data\r\n\tthis.bindInputTexture(X, gl.TEXTURE0, SCLMPCalculator.TEXTURE_UNIFORM_NAME_0);\r\n\r\n\tvar nPad = this.webgl.getPad(N);\r\n\t// set the data specific variables in our shader program\r\n\tthis.bindUniforms(N, nPad, a, b);\r\n\r\n\t// create our destination texture\r\n\tif(this.standalone){\r\n\t\tthis.webgl.bindOutputTexture(M, N + nPad, out);\r\n\t} else {\r\n\t\tthis.webgl.bindOutputTexture(M, (N + nPad)/ 4, out);\r\n\t}\r\n\r\n\t// initiate calculation\r\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\r\n\r\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\r\n\r\n};\r\n\r\n/* Create a texture from the given texel data and bind it to our shader program.\r\n\r\n\th - number of rows in input matrix\r\n\tw - number of cols in input matrix\r\n\ttexels - packed data\r\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\r\n\tname - the uniform name to associate with (must match shader program)\r\n\r\n\tmust compile program (with createProgram) first\r\n*/\r\nSCLMPCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\r\n\tvar gl = this.webgl.context,\r\n\t\tprogram = this.program;\r\n\r\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\r\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\r\n\r\n\tvar sampler = gl.getUniformLocation(program, name);\r\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\r\n\r\n};\r\n\r\n/* Set up inputs for the texture shader\r\n\r\n */\r\nSCLMPCalculator.prototype.bindUniforms = function(N, pad, a, b) {\r\n\tvar gl = this.webgl.context;\r\n\r\n\t// get var locations\r\n\tvar N_gl = gl.getUniformLocation(this.program, SCLMPCalculator.LENGTH_UNIFORM_NAME),\r\n\t\tb_gl = gl.getUniformLocation(this.program, SCLMPCalculator.UPPER_UNIFORM_NAME),\r\n\t\ta_gl = gl.getUniformLocation(this.program, SCLMPCalculator.LOWER_UNIFORM_NAME),\r\n\t\tpad_gl = gl.getUniformLocation(this.program, \"pad\");\r\n\r\n\t// bind length of shared dimension\r\n\tgl.uniform1i(N_gl, N);\r\n\tgl.uniform1i(pad_gl, pad);\r\n\tgl.uniform1f(a_gl, a);\r\n\tgl.uniform1f(b_gl, b);\r\n\r\n};\r\n","var WebGL = require('./webgl');\n\n/* A calculator object for the Float texture based GEMM\n\n\tGeneralized Matrix Multiply (GEMM):\n\n\tC = alpha * A * B + beta * C\n\n\twhere A * B is matrix multiplication\n\n\n\twebgl - a weblas.WebGL object\n\tstandalone - whether or not to automatically run the floating point encode\n\t\tstep for rendering to an UNSIGNED_BYTE texture (this is required for\n\t\tmobile, circa 2015) but can't be used as part of a pipeline.\n\n\t* uploads and downloads data\n\t* executes calculation\n */\nfunction SGEMMCalculator(webgl, standalone){\n\tthis.webgl = webgl,\n\tthis.standalone = (standalone != null) ? standalone : true; // default to standalone mode\n\n\t// read GLSL files\n\tvar s = \"#define GLSLIFY 1// fragment shader that calculates the matrix product and renders each\\r\\n// element to the bytes representing a 32-bit IEEE754 floating point in\\r\\n// the output RGBA canvas.\\r\\n// readPixel is used to read the bytes.\\r\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\r\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\r\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\r\\nuniform int       K;\\t\\t// number of elements in shared dimension\\r\\nuniform int       N;\\t\\t// number of columns in output\\r\\nuniform int       pad;\\t\\t//\\r\\nuniform float     alpha; \\t// coefficient to multiplication\\r\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\r\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\r\\n// identified by the passed indeces (output texture coordinate space).\\r\\n// We loop over elements in the row and column and sum the product\\r\\n// using the glsl `dot` function to process four elements at a time.\\r\\n// This four element optimization requires that the matrix B be\\r\\n// transposed before texel packing and that both matrices be padded\\r\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\r\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\r\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\r\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\r\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\r\\n\\t\\t// l is in pixel space, so we divide by four\\r\\n\\n\\t\\t// retrieve next four elements from each texture\\r\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\r\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\r\\n\\t}\\n\\n\\treturn sum;\\n\\n}\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\r\\nvec4 encode_float_1604150559(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\r\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\r\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\r\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\r\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\r\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\r\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\r\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\r\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\r\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\r\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\r\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\r\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\r\\n\\n\\treturn vec4(m3,m2,m1,e);\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate. These map directly to input texture space when\\r\\n\\t// the relevant dimensions are the same.\\r\\n\\tfloat row_t = outTex.y;\\n\\n\\tfloat col_t = outTex.x;\\n\\n\\t// sum row x col for the passed pixel\\r\\n\\tfloat sum = alpha * dot_rowcol_1540259130(row_t, col_t * float(N + pad)/float(N), A, B_t, K);\\n\\n\\tif (sum == 0.) {\\n\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\n\\t\\treturn;\\n\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\r\\n\\tgl_FragColor = encode_float_1604150559(sum);\\n\\n}\\n\\n\",\n\t\ts_c = \"#define GLSLIFY 1\\n// fragment shader that calculates the matrix product (with additive 'C' term)\\n// and renders each element to the bytes representing a 32-bit IEEE754 floating\\n// point in the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform sampler2D C;\\t\\t// texture with data from C\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\nuniform float     beta; \\t// coefficient to additive term\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\r\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\r\\n// identified by the passed indeces (output texture coordinate space).\\r\\n// We loop over elements in the row and column and sum the product\\r\\n// using the glsl `dot` function to process four elements at a time.\\r\\n// This four element optimization requires that the matrix B be\\r\\n// transposed before texel packing and that both matrices be padded\\r\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\r\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\r\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\r\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\r\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\r\\n\\t\\t// l is in pixel space, so we divide by four\\r\\n\\n\\t\\t// retrieve next four elements from each texture\\r\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\r\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\r\\n\\t}\\n\\n\\treturn sum;\\n\\n}\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\r\\nvec4 encode_float_1604150559(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\r\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\r\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\r\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\r\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\r\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\r\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\r\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\r\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\r\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\r\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\r\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\r\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\r\\n\\n\\treturn vec4(m3,m2,m1,e);\\n\\n}\\n\\n// select an element from a vector based on index\\r\\nfloat select_index_1117569599(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tvec4 c_vec = texture2D(C, vec2(col_t, 0.5));\\n\\n\\t// should be -0.5, but that subtly breaks at zero\\n\\tfloat col = col_t * float(N + pad); // index of first element in pixel (matrix space)\\n\\tint channel = int(mod(col, 4.0 ));\\n\\tfloat c = select_index_1117569599(c_vec, channel);\\n\\n\\t// sum row x col for the passed pixel\\n\\tfloat sum = alpha * dot_rowcol_1540259130(row_t, col_t * float(N + pad)/float(N), A, B_t, K);\\n\\tsum += beta * c;\\n\\n\\tif (sum == 0.) {\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\t\\treturn;\\n\\t}\\n\\n\\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\n\\tgl_FragColor = encode_float_1604150559(sum);\\n}\\n\",\n\t\tp = \"#define GLSLIFY 1\\n// fragment shader that calculates the matrix product and writes each\\n// element to a pixel component in a floating point texture.\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\r\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\r\\n// identified by the passed indeces (output texture coordinate space).\\r\\n// We loop over elements in the row and column and sum the product\\r\\n// using the glsl `dot` function to process four elements at a time.\\r\\n// This four element optimization requires that the matrix B be\\r\\n// transposed before texel packing and that both matrices be padded\\r\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\r\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\r\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\r\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\r\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\r\\n\\t\\t// l is in pixel space, so we divide by four\\r\\n\\n\\t\\t// retrieve next four elements from each texture\\r\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\r\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\r\\n\\t}\\n\\n\\treturn sum;\\n\\n}\\n\\n// set pad values to 0.0, if in padded region of output texture\\r\\nvoid fix_pad_1604150559(inout vec4 v, int pad){\\n\\n\\tv.a = 0.0;\\n\\n\\tif(pad == 2){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t} else if(pad == 3){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t\\tv.g = 0.0;\\n\\n\\t}\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tvec4 sum_v = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\tsum_v.r = alpha * dot_rowcol_1540259130(row_t, (col + 0.5)/float(N), A, B_t, K);\\n\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\tsum_v.a = alpha * dot_rowcol_1540259130(row_t, (col + 3.5)/float(N), A, B_t, K);\\n\\n\\tif(pad > 0 && col + 4.0 > float(N) ) {\\n\\t\\tfix_pad_1604150559(sum_v, int(pad));\\n\\t}\\n\\n\\tgl_FragColor = sum_v;\\n}\\n\",\n\t\tp_c = \"#define GLSLIFY 1\\n// fragment shader that calculates the matrix product and writes each\\n// element to a pixel component in a floating point texture.\\n// the output RGBA canvas.\\n// readPixel is used to read the bytes.\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform sampler2D B_t;\\t\\t// texture with data from padded transpose of B\\nuniform sampler2D C;\\t\\t// texture with data from C\\nuniform int       K;\\t\\t// number of elements in shared dimension\\nuniform int       N;\\t\\t// number of columns in output\\nuniform int       pad;\\t\\t//\\nuniform float     alpha; \\t// coefficient to multiplication\\nuniform float     beta; \\t// coefficient to addition\\n\\n// sum of products between elements in row i (from A) x col j (from B)\\r\\n\\n// Calculate the dot product between the row (from A) and column (from B)\\r\\n// identified by the passed indeces (output texture coordinate space).\\r\\n// We loop over elements in the row and column and sum the product\\r\\n// using the glsl `dot` function to process four elements at a time.\\r\\n// This four element optimization requires that the matrix B be\\r\\n// transposed before texel packing and that both matrices be padded\\r\\n// (with zeros) to a multiple of four (4) in their shared dimension.\\r\\nfloat dot_rowcol_1540259130(float y, float x, sampler2D A, sampler2D B_t, int K) {\\n\\n\\tfloat delta_t = 1./float(K);// space (on texture) between elements\\r\\n\\tfloat sum = 0.;\\t\\t\\t// sum for this row/column pair\\r\\n\\tfloat z = 0.5 * (4.0 * delta_t);// position for shared dimension on source textures\\r\\n\\n\\tfor (int l=0 ; l<4096 ; ++l) {\\n\\n\\t\\tif(l >= K / 4) break;    // stop when we finish the row/column\\r\\n\\t\\t// l is in pixel space, so we divide by four\\r\\n\\n\\t\\t// retrieve next four elements from each texture\\r\\n\\t\\tvec4 a_ik = texture2D(  A, vec2(z, y));\\n\\n\\t\\tvec4 b_kj = texture2D(B_t, vec2(z, x));\\n\\n\\t// use `dot` to process four elements at a time\\r\\n\\t\\tsum +=  dot(a_ik, b_kj);\\n\\n\\t\\tz += (4.0 * delta_t);      // (z + 0.5)*delta\\r\\n\\t}\\n\\n\\treturn sum;\\n\\n}\\n\\n// set pad values to 0.0, if in padded region of output texture\\r\\nvoid fix_pad_1604150559(inout vec4 v, int pad){\\n\\n\\tv.a = 0.0;\\n\\n\\tif(pad == 2){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t} else if(pad == 3){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t\\tv.g = 0.0;\\n\\n\\t}\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\tvec4 c_v = texture2D(C, vec2(col_t, 0.5));\\n\\n\\tvec4 sum_v = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tfloat col = (col_t * float(N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\tsum_v.r = alpha * dot_rowcol_1540259130(row_t, (col + 0.5)/float(N), A, B_t, K);\\n\\tsum_v.g = alpha * dot_rowcol_1540259130(row_t, (col + 1.5)/float(N), A, B_t, K);\\n\\tsum_v.b = alpha * dot_rowcol_1540259130(row_t, (col + 2.5)/float(N), A, B_t, K);\\n\\tsum_v.a = alpha * dot_rowcol_1540259130(row_t, (col + 3.5)/float(N), A, B_t, K);\\n\\n\\tif(pad > 0 && col + 4.0 > float(N) ) {\\n\\t\\tfix_pad_1604150559(sum_v, int(pad));\\n\\t}\\n\\n\\tgl_FragColor = sum_v + beta*c_v;\\n}\\n\";\n\n\t// create the webgl shader program for this calculation\n\t// based on the specific fragment shader for this calculation\n\t// and the generic pass through shader\n\tif(this.standalone){\n\t\tthis.program_ = this.webgl.createProgram(s);\n\t\tthis.program_c = this.webgl.createProgram(s_c);\n\t} else {\n\t\tthis.program_ = this.webgl.createProgram(p);\n\t\tthis.program_c = this.webgl.createProgram(p_c);\n\t}\n\n}\n\nmodule.exports = SGEMMCalculator;\n\n/* Names of the uniforms (variables) used in the shader program passed in on\n   each calculation.\n */\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_0 = \"A\";\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_1 = \"B_t\";\nSGEMMCalculator.TEXTURE_UNIFORM_NAME_2 = \"C\";\nSGEMMCalculator.SHARED_LENGTH_UNIFORM_NAME = \"K\";\nSGEMMCalculator.COLUMN_COUNT_UNIFORM_NAME = \"N\";\nSGEMMCalculator.PAD_UNIFORM_NAME = \"pad\";\nSGEMMCalculator.ALPHA_UNIFORM_NAME = \"alpha\";\nSGEMMCalculator.BETA_UNIFORM_NAME = \"beta\";\n\n/* Calculate the GEMM, with the given data.\n\n\tM - number of rows in A\n\tN - number of columns in B\n\tK - number of elements in shared dimension (including padding)\n\talpha - scalar for A\n\tA - left hand matrix (as padded texture)\n\tB - transpose of right hand matrix (as padded texture)\n\tbeta - scalar for C\n\tC - additive matrix (texture)\n\tout - output (texture)\n\n  How this works:\n\n  1. Activate our shader program\n  2. Bind input textures\n  3. Set shader program parameters\n  4. Bind output texture\n  5. Activate calculation with `drawElements`\n\n TODO: signature should look like this:\n ( TRANSA, TRANSB, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC )\n http://www.math.utah.edu/software/lapack/lapack-blas/dgemm.html\n */\nSGEMMCalculator.prototype.calculate = function(M, N, K, alpha, A, B, beta, C, out){\n\n\tvar gl = this.webgl.context;\n\n\t/*\n\tvar h1 = M, w1 = K,\n\t\th2 = K, w2 = N;\n\t*/\n\n\t// set this calculator program as the active program\n\tif(C != null){\n\t\tthis.program = this.program_c;\n\t} else {\n\t\tbeta = null;\n\t\tthis.program = this.program_;\n\t\t//console.log(\"no C\");\n\t}\n\tthis.webgl.selectProgram(this.program);\n\n\t//  bind our input textures containing matrix data\n\tthis.bindInputTexture(A, gl.TEXTURE0, SGEMMCalculator.TEXTURE_UNIFORM_NAME_0);\n\tthis.bindInputTexture(B, gl.TEXTURE1, SGEMMCalculator.TEXTURE_UNIFORM_NAME_1);\n\tif(C != null){\n\t\tthis.bindInputTexture(C, gl.TEXTURE2, SGEMMCalculator.TEXTURE_UNIFORM_NAME_2);\n\t}\n\n\tvar kPad = this.webgl.getPad(K),\n\t\tnPad = this.webgl.getPad(N);\n\n\t// set the data specific variables in our shader program\n\tthis.bindUniforms(N, K + kPad, nPad, alpha, beta);\n\n\t// create our destination texture\n\tif(this.standalone){\n\t\tthis.webgl.bindOutputTexture(M, N + nPad, out);\n\t} else {\n\t\tthis.webgl.bindOutputTexture(M, (N + nPad)/ 4, out);\n\t}\n\n\t// initiate calculation\n\tgl.drawElements(gl.TRIANGLES, /*num items*/6, gl.UNSIGNED_SHORT, 0);\n\n\tthis.webgl.unbindInputTexture(gl.TEXTURE0);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE1);\n\tthis.webgl.unbindInputTexture(gl.TEXTURE2);\n\n\t// result can now be read with gl.readResult, or more operations can be\n\t// performed on destination texture (in pipeline mode)\n};\n\n\n/* Create a texture from the given texel data and bind it to our shader program.\n\n\th - number of rows in input matrix\n\tw - number of cols in input matrix\n\ttexels - packed data\n\ttextureUnit - the texture unit to bind to (gl.TEXTURE0, gl.TEXTURE1, etc)\n\tname - the uniform name to associate with (must match shader program)\n\n\tmust compile program (with createProgram) first\n*/\nSGEMMCalculator.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.webgl.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n\n/* Set up inputs for the texture shader\n\n\tK - size of shared dimension for multiplied matrices\n */\nSGEMMCalculator.prototype.bindUniforms = function(N, K, pad, alpha, beta) {\n\tvar gl = this.webgl.context;\n\n\t// get var locations\n\tvar K_gl\t = gl.getUniformLocation(this.program, SGEMMCalculator.SHARED_LENGTH_UNIFORM_NAME),\n\t\talpha_gl = gl.getUniformLocation(this.program, SGEMMCalculator.ALPHA_UNIFORM_NAME),\n\t\tbeta_gl = gl.getUniformLocation(this.program, SGEMMCalculator.BETA_UNIFORM_NAME),\n\t\tN_gl = gl.getUniformLocation(this.program, SGEMMCalculator.COLUMN_COUNT_UNIFORM_NAME),\n\t\tpad_gl = pad_gl = gl.getUniformLocation(this.program, SGEMMCalculator.PAD_UNIFORM_NAME);\n\n\tgl.uniform1f(beta_gl, beta);\n\tgl.uniform1i(N_gl, N);\n\tgl.uniform1i(pad_gl, pad);\n\n\t// bind length of shared dimension\n\tgl.uniform1i(K_gl, K);\n\t// bind alpha\n\tgl.uniform1f(alpha_gl, alpha);\n\n};\n","var globals = require(\"./globals\");\r\n\r\nvar gl = globals.gl;\r\n\r\nfunction Tensor(shape, data){\r\n\tif(shape.length != 2)\r\n\t\tthrow new Error(\"Only Tensor of order two (matrix) is supported right now.\");\r\n\r\n\tvar M = shape[0],\r\n\t\tN = shape[1];\r\n\r\n\tthis.texture = gl.createDataTexture(M, N, data);\r\n\r\n\tthis.shape = [M, N];\r\n}\r\n\r\nmodule.exports = Tensor;\r\n\r\nTensor.prototype.delete = function(){\r\n\tgl.context.deleteTexture(this.texture);\r\n\tthis.texture = null;\r\n\tthis.shape = null;\r\n};\r\n\r\nTensor.prototype.transfer = function(keep){\r\n\r\n\tvar M = this.shape[0],\r\n\t\tN = this.shape[1],\r\n\t\tout,\r\n\t\tresult;\r\n\r\n\t// create output texture\r\n\tout = gl.createOutputTexture(M, N);\r\n\r\n\t// float extraction\r\n\tgl.encode(M, N, this.texture, out);\r\n\r\n\tresult = new Float32Array(gl.readData(M, N));\r\n\r\n\t// clean up\r\n\tgl.context.deleteTexture(out);\r\n\r\n\tif(!keep){\r\n\t\tthis.delete();\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nTensor.prototype.reshape = function(shape, keep){\r\n\r\n\tvar M = this.shape[0],\r\n\t\tN = this.shape[1],\r\n\t\tM_out = shape[0],\r\n\t\tN_out = shape[1];\r\n\r\n\t// create new texture to hold tranpose\r\n\tvar t0 = new Tensor(shape, null);\r\n\r\n\t// invoke shader\r\n\tgl.reshape(M, N, M_out, N_out, this.texture, t0.texture);\r\n\r\n\tif(!keep){\r\n\t\tthis.delete();\r\n\t}\r\n\r\n\treturn t0;\r\n};\r\n\r\nTensor.prototype.transpose = function(keep){\r\n\r\n\tvar M = this.shape[0],\r\n\t\tN = this.shape[1];\r\n\r\n\t// create new texture to hold tranpose\r\n\tvar tT = new Tensor([N, M], null);\r\n\r\n\t// invoke shader\r\n\tgl.transpose(M, N, this.texture, tT.texture);\r\n\r\n\tif(!keep){\r\n\t\tthis.delete();\r\n\t}\r\n\r\n\treturn tT;\r\n};\r\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (typeof arguments[1] === 'function') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var hasError = false;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            if (hasError) return;\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    hasError = true;\n\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback.apply(null, [null].concat(args));\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                while(!q.paused && workers < q.concurrency && q.tasks.length){\n\n                    var tasks = q.payload ?\n                        q.tasks.splice(0, q.payload) :\n                        q.tasks.splice(0, q.tasks.length);\n\n                    var data = _map(tasks, function (task) {\n                        return task.data;\n                    });\n\n                    if (q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    workersList.push(tasks[0]);\n                    var cb = only_once(_next(q, tasks));\n                    worker(data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        var has = Object.prototype.hasOwnProperty;\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (has.call(memo, key)) {   \n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (has.call(queues, key)) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if (typeof module === 'object' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","exports.load = function(url, callback) {\n\tvar xhr = new XMLHttpRequest();\n\n\txhr.onreadystatechange = function() {\n\t\tif (xhr.readyState !== 4) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xhr.status >= 200 && xhr.status < 300) {\n\t\t\tcallback(null, xhr.responseText);\n\t\t} else {\n\t\t\tvar err = new Error(\"failed to request file '\" + url + \"'\");\n\t\t\t// follow Node.js error signature\n\t\t\terr.errno = 34;\n\t\t\tcallback(err);\n\t\t}\n\t};\n\n\ttry {\n\t\txhr.open('GET', url, true);\n\t\txhr.send(null);\n\t} catch (err) {\n\t\tcallback(err);\n\t}\n};","\n/*\nCopyright (c) 2015 Waylon Flinn\n\nwebgl.js\n\nmultiply matrices up to 4096 x 4096 on GPUs that support OES_texture_float\nextension. input is encoded into the red and green channels of an input texture and\ncalculations are done using a custom fragment shader.\n\n*/\n\n\n/*\n\tA WebGL context associated with a specific canvas element.\n\n\t* creates a canvas\n\t* sets up webgl context\n\t* translates numbers into textures\n\t* compiles shader programs for executing math (when supplied with an\n\t\toperation specific fragment shader)\n */\nfunction WebGL(options) {\n\n\tvar glOptions,\n\t\text;\n\n\toptions = options || {};\n\n\t// canvas\n\tif(typeof options.canvas === 'undefined')\n\t\tthis.canvas = document.createElement('canvas');\n\telse\n\t\tthis.canvas = options.canvas;\n\n\t// context\n\tglOptions = { premultipliedAlpha: false, preserveDrawingBuffer: false };\n\tthis.context = this.canvas.getContext(\"experimental-webgl\", glOptions);\n\n\tif (typeof this.context === 'undefined')\n\t\tthrow new Error(\"No support for Webgl.\");\n\n\t// float texture extension\n\ttry {\n\t\text = this.context.getExtension('OES_texture_float');\n\t} catch(e) {\n\n\t}\n\tif ( !ext ) {\n\t\tconsole.log(\"No support for OES_texture_float extension.\");\n\t\tthis.hasFloat = false;\n\t} else {\n\t\tthis.hasFloat = true;\n\t}\n\n\tvar highp = this.context.getShaderPrecisionFormat(this.context.FRAGMENT_SHADER, this.context.HIGH_FLOAT);\n\tthis.hasHighPrecision = highp.precision != 0;\n\tif(this.hasHighPrecision) this.highp = highp;\n\n\t// create pass through vertex shader\n\tvar passThrough = \"#define GLSLIFY 1// vertex shader for a single quad\\r\\n// work is performed in the operation specific texture shader\\r\\n\\nprecision highp float;\\n\\nattribute vec3 pos;\\n\\nattribute vec2 tex;\\n\\nvarying vec2   outTex;\\n\\nvoid main(void)\\n\\n{\\n\\n\\t// just pass the position and texture coords\\r\\n\\tgl_Position = vec4(pos, 1.0);\\n\\n\\toutTex = tex;\\n\\n}\\n\\n\";\n\tthis.vertexShader = this.context.createShader(this.context.VERTEX_SHADER);\n\tthis.context.shaderSource(this.vertexShader, passThrough);\n\tthis.context.compileShader(this.vertexShader);\n\n\tvar encode = \"#define GLSLIFY 1\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\r\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\r\\nuniform int       N;\\t\\t// number of columns in output\\r\\nuniform int       pad;\\t\\t//\\r\\n\\n// Render float to bytes according to IEEE 754 Floating Point\\r\\nvec4 encode_float_1540259130(float val) {\\n\\n\\t// TODO: correctly handle denormal numbers\\r\\n\\t// http://www.2ality.com/2012/04/number-encoding.html\\r\\n\\tfloat a = abs(val);                           // encode absolute value + sign\\r\\n\\tfloat exp = floor(log2(a));                 // number of powers of 2\\r\\n\\tfloat mant = pow(2.,log2(a)-exp) * pow(2.,23.);  // multiply to fill 24 bits (implied leading 1)\\r\\n\\tfloat mant1 = floor(mant / 256. / 256.);    // first 8 bits of mantissa\\r\\n\\tfloat mant2 = mod(floor(mant / 256.),256.); // second 8 bits\\r\\n\\tfloat mant3 = mod(mant,256.);               // third 8 bits\\r\\n\\n\\thighp float sign = 128.-128.*(a/val);\\t\\t\\t// sign bit is 256 or 0\\r\\n\\thighp float e = (sign+exp+127.)/510.;\\t\\t// exponent and sign\\r\\n\\thighp float m1 = (mant1-(128.*(1.-mod(exp+127.,2.))))/255.; // handle leading bit\\r\\n\\thighp float m2 = (mant2)/255.;\\t\\t\\t\\t// middle part\\r\\n\\thighp float m3 = (mant3+.5)/255.;\\t\\t\\t// scale to 0 - 255\\r\\n\\n\\treturn vec4(m3,m2,m1,e);\\n\\n}\\n\\n// select an element from a vector based on index\\r\\nfloat select_index_1604150559(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate. These map directly to input texture space when\\r\\n\\t// the relevant dimensions are the same.\\r\\n\\tfloat row_t = outTex.y;\\n\\n\\tfloat col_t = outTex.x;\\n\\n\\tvec4 val_v = texture2D(A, vec2(col_t * float(N)/float(N + pad), row_t));\\n\\n\\tint channel = int(mod(col_t * float(N), 4.0 ));\\n\\n\\tfloat val = select_index_1604150559(val_v, channel);\\n\\n\\tif (val == 0.) {\\n\\n\\t\\tgl_FragColor = vec4(0.,0.,0.,0.);\\n\\n\\t\\treturn;\\n\\n\\t}\\n\\n \\t// output vec4 with bytes for an IEEE754 32-bit floating point number\\r\\n\\tgl_FragColor = encode_float_1540259130(val);\\n\\n}\\n\\n\",\n\t\ttranspose = \"#define GLSLIFY 1\\n\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\r\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\r\\nuniform int       M;\\t\\t// number of rows in output\\r\\nuniform int       N;\\t\\t// number of columns in output\\r\\nuniform int       mpad;\\t\\t//\\r\\nuniform int       npad;\\t\\t//\\r\\n\\n// select an element from a vector based on index\\r\\nfloat select_index_1540259130(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\r\\n\\t// texture coordinate. These map directly to input texture space when\\r\\n\\t// the relevant dimensions are the same.\\r\\n\\tfloat row_t = outTex.y;\\n\\n\\tfloat col_t = outTex.x;\\n\\n\\tfloat col = (col_t * float(N + npad) - 2.0); // index of first element in pixel (matrix space)\\r\\n\\n\\t// get rows in the input, each containing one element in the output\\r\\n\\tvec4 row_1 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 0.5)/float(N)));\\n\\n\\tvec4 row_2 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 1.5)/float(N)));\\n\\n\\tvec4 row_3 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 2.5)/float(N)));\\n\\n\\tvec4 row_4 = texture2D(A, vec2((row_t * float(M))/float(M + mpad), (col + 3.5)/float(N)));\\n\\n\\t// package into output vector\\r\\n\\tint channel = int(mod(row_t * float(M), 4.0 ));\\n\\n\\tvec4 col_v = vec4(0.0, 0.0, 0.0, 0.0); // vec4 representing four elements in a column in the input\\r\\n\\n\\t// extract relevent element from each input row\\r\\n\\tcol_v.r = select_index_1540259130(row_1, channel);\\n\\n\\tif(npad > 0 && (col + 4.0) > float(N) ) {\\n\\n\\t\\t// compute elements in padded region\\r\\n\\t\\tif(npad < 3){\\n\\n\\t\\t\\tcol_v.g = select_index_1540259130(row_2, channel);\\n\\n\\t\\t}\\n\\n\\t\\tif(npad < 2){\\n\\n\\t\\t\\tcol_v.b = select_index_1540259130(row_3, channel);\\n\\n\\t\\t}\\n\\n\\t} else {\\n\\n\\t\\tcol_v.g = select_index_1540259130(row_2, channel);\\n\\n\\t\\tcol_v.b = select_index_1540259130(row_3, channel);\\n\\n\\t\\tcol_v.a = select_index_1540259130(row_4, channel);\\n\\n\\t}\\n\\n\\tgl_FragColor = col_v;\\n\\n}\\n\\n\",\n\t\treshape = \"#define GLSLIFY 1\\nprecision highp float;\\n\\nvarying vec2      outTex;\\t// texture coords of row/column to calculate\\nuniform sampler2D A;\\t\\t// texture with data from padded A\\nuniform float     M;\\t\\t// number of rows in output\\nuniform float     N;\\t\\t// number of columns in output\\nuniform float     pad;\\t\\t// column padding in output\\nuniform float     M_in;\\t\\t// number of rows in input\\nuniform float     N_in;\\t\\t// number of columns in input\\nuniform float     pad_in;\\t// column padding in input\\n\\n/* number of input pixels\\n   origin index (channel) for each\\n   termination index (channel) for each\\n   destination origin index (channel) for each\\n */\\n// select an element from a vector based on index\\r\\nfloat select_index_1540259130(vec4 v, int index){\\n\\n\\tfloat val;\\n\\n\\tif (index == 0) {\\n\\n\\t\\tval = v.r;\\n\\n\\t} else if(index == 1) {\\n\\n\\t\\tval = v.g;\\n\\n\\t} else if(index == 2) {\\n\\n\\t\\tval = v.b;\\n\\n\\t} else if(index == 3){\\n\\n\\t\\tval = v.a;\\n\\n\\t} else {\\n\\n\\t\\t// should never be here\\r\\n\\t\\tval = 0.0;\\n\\n\\t}\\n\\n\\treturn val;\\n\\n}\\n\\n// set pad values to 0.0, if in padded region of output texture\\r\\nvoid fix_pad_1604150559(inout vec4 v, int pad){\\n\\n\\tv.a = 0.0;\\n\\n\\tif(pad == 2){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t} else if(pad == 3){\\n\\n\\t\\tv.b = 0.0;\\n\\n\\t\\tv.g = 0.0;\\n\\n\\t}\\n\\n}\\n\\n// translate a linear index into x, y coordinates for a matrix\\nvec2 linear_index_coords(float linear_index, float row_length){\\n\\tvec2 coords;\\n\\n\\tcoords.x = floor(mod(linear_index + 0.5, row_length)); // column\\n\\tcoords.y = floor((linear_index + 0.5) / row_length); // row\\n\\n\\treturn coords;\\n}\\n\\nvoid main(void) {\\n\\n\\t// get the implied row and column from .y and .x of passed (output)\\n\\t// texture coordinate. These map directly to input texture space when\\n\\t// the relevant dimensions are the same.\\n\\tfloat row_t = outTex.y;\\n\\tfloat col_t = outTex.x;\\n\\n\\tfloat row = floor(row_t * M);\\n\\tfloat col_0 = (col_t * (N + pad) - 2.0); // index of first element in pixel (matrix space)\\n\\t//float col_0 = floor(col_t * (N + pad)/4.0)*4.0; // index of first element in pixel (matrix space)\\n\\tfloat lin_index_0 = row * N + col_0; // linearized index of first element in pixel in output\\n\\n\\tvec4 pixel_in = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tvec4 result = vec4(0.0, 0.0, 0.0, 0.0);\\n\\tvec2 coords = linear_index_coords(lin_index_0, N_in);\\n\\tvec2 ncoords;\\n\\tint current_pixel_index = int(mod(coords.x, 4.0));\\n\\n\\tpixel_in = texture2D(A, vec2((coords.x + 0.5)/(N_in + pad_in), (coords.y + 0.5)/M_in));\\n\\n\\t// go through channels for current output pixel\\n\\tfor(int i = 0; i < 4; i++){\\n\\n\\t\\t// are we on a new input pixel?\\n\\t\\tncoords = linear_index_coords(lin_index_0 + float(i), N_in);\\n\\t\\tif(floor(coords.x/4.0) != floor(ncoords.x/4.0) || coords.y != ncoords.y){\\n\\t\\t\\tcoords = ncoords;\\n\\t\\t\\tpixel_in = texture2D(A, vec2((coords.x + 0.5)/(N_in + pad_in), (coords.y + 0.5)/M_in));\\n\\t\\t\\tcurrent_pixel_index = 0;\\n\\t\\t}\\n\\n\\t\\tif(i == 0){\\n\\t\\t\\tresult.r = select_index_1540259130(pixel_in, current_pixel_index);\\n\\t\\t} else if(i == 1){\\n\\t\\t\\tresult.g = select_index_1540259130(pixel_in, current_pixel_index);\\n\\t\\t} else if(i == 2){\\n\\t\\t\\tresult.b = select_index_1540259130(pixel_in, current_pixel_index);\\n\\t\\t} else {\\n\\t\\t\\tresult.a = select_index_1540259130(pixel_in, current_pixel_index);\\n\\t\\t}\\n\\n\\t\\tcurrent_pixel_index++;\\n\\t}\\n\\n\\t// are we in the padded (output) region?\\n\\tif(pad > 0.0 && col_0 + 3.5 > N ) {\\n\\t\\tfix_pad_1604150559(result, int(pad));\\n\\t}\\n\\n\\tgl_FragColor = result;\\n}\\n\";\n\n\tthis.encode_program = this.createProgram(encode);\n\tthis.transpose_program = this.createProgram(transpose);\n\tthis.reshape_program = this.createProgram(reshape);\n};\n\nmodule.exports = WebGL;\n\n// RGBA is the standard input/ouput texture\nWebGL.COMPONENTS_PER_TEXEL = 4;\n\nWebGL.POSITION_UNIFORM_NAME = \"pos\";\nWebGL.TEXTURE_UNIFORM_NAME = \"tex\";\n\n\nWebGL.prototype.encode = function(M, N, texture0, out){\n\n\tthis.program = this.encode_program;\n\tthis.selectProgram(this.program);\n\n\tvar pad = this.getPad(N);\n\n\tvar N_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tpad_gl = this.context.getUniformLocation(this.program, \"pad\");\n\n\tthis.context.uniform1i(N_gl, N);\n\tthis.context.uniform1i(pad_gl, pad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(M, N, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n}\n\n/* tranpose a texture where input has M rows and N columns\n */\nWebGL.prototype.transpose = function(M, N, texture0, out){\n\n\tthis.program = this.transpose_program;\n\tthis.selectProgram(this.program);\n\n\tvar npad = this.getPad(N),\n\t\tmpad = this.getPad(M);\n\n\t// in the shader M and N describe rows and columns in the *output*, respectively\n\tvar N_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tnpad_gl = this.context.getUniformLocation(this.program, \"npad\"),\n\t\tM_gl = this.context.getUniformLocation(this.program, \"M\"),\n\t\tmpad_gl = this.context.getUniformLocation(this.program, \"mpad\");\n\n\tthis.context.uniform1i(N_gl, M);\n\tthis.context.uniform1i(npad_gl, mpad);\n\tthis.context.uniform1i(M_gl, N);\n\tthis.context.uniform1i(mpad_gl, npad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(N, (M + mpad)/4, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n};\n\n/* tranpose a texture where input has M rows and N columns\n */\nWebGL.prototype.reshape = function(M, N, M_out, N_out, texture0, out){\n\n\tthis.program = this.reshape_program;\n\tthis.selectProgram(this.program);\n\n\tvar pad = this.getPad(N),\n\t\tpad_out = this.getPad(N_out);\n\n\t// in the shader M and N describe rows and columns in the *output*, respectively\n\tvar M_gl = this.context.getUniformLocation(this.program, \"M\"),\n\t\tN_gl = this.context.getUniformLocation(this.program, \"N\"),\n\t\tpad_gl = this.context.getUniformLocation(this.program, \"pad\"),\n\t\tM_in_gl = this.context.getUniformLocation(this.program, \"M_in\"),\n\t\tN_in_gl = this.context.getUniformLocation(this.program, \"N_in\"),\n\t\tpad_in_gl = this.context.getUniformLocation(this.program, \"pad_in\");\n\n\tthis.context.uniform1f(M_gl, M_out);\n\tthis.context.uniform1f(N_gl, N_out);\n\tthis.context.uniform1f(pad_gl, pad_out);\n\tthis.context.uniform1f(M_in_gl, M);\n\tthis.context.uniform1f(N_in_gl, N);\n\tthis.context.uniform1f(pad_in_gl, pad);\n\n\tthis.bindInputTexture(texture0, this.context.TEXTURE0, \"A\");\n\n\tthis.bindOutputTexture(M_out, (N_out + pad_out)/4, out);\n\n\tthis.context.drawElements(this.context.TRIANGLES, /*num items*/6, this.context.UNSIGNED_SHORT, 0);\n\n\tthis.unbindInputTexture(this.context.TEXTURE0);\n};\n\nWebGL.prototype.bindInputTexture = function(texture, textureUnit, name){\n\tvar gl = this.context,\n\t\tprogram = this.program;\n\n\tgl.activeTexture(textureUnit); // gl.TEXTURE0, gl.TEXTURE1, etc\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\n\tvar sampler = gl.getUniformLocation(program, name);\n\tgl.uniform1i(sampler, textureUnit - gl.TEXTURE0);\n\n};\n\n/*  Create a shader program based on a pass through vertex shader and\n\tthe supplied operation specific fragment shader.\n\n\tfragmentShaderSource - string containing the fragment shader source code.\n\tshader will recieve `vec2 outTex` with texture coordinates from the pass\n\tthrough vertex shader.\n */\nWebGL.prototype.createProgram = function(fragmentShaderSource){\n\tvar gl = this.context,\n\t\tfragmentShader;\n\n\t// compile the provided fragment/texture shader\n\tfragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(fragmentShader, fragmentShaderSource);\n\tgl.compileShader(fragmentShader);\n\n\t// did it compile correctly?\n\tif (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) == 0)\n\t\tthrow new Error(gl.getShaderInfoLog(fragmentShader));\n\n\t// link the program specific fragment shader and the generic pass through\n\t// shader into a program\n\tvar program = gl.createProgram();\n\tgl.attachShader(program, this.vertexShader);\n\tgl.attachShader(program, fragmentShader);\n\tgl.linkProgram(program);\n\n\treturn program;\n};\n\nWebGL.prototype.selectProgram = function(program){\n\n\tvar gl = this.context;\n\n\t// set calculator program to current shader program\n\tgl.useProgram(program);\n\n\tthis.bindVertices(program);\n};\n\n/* setup required to draw a square to our vertex shader and have\n   fragment shader called for each pixel\n */\nWebGL.prototype.bindVertices = function(program) {\n\tvar gl = this.context,\n\t\trenderer = program;\n\n\t// bind vertices\n\tvar position = gl.getAttribLocation(renderer, WebGL.POSITION_UNIFORM_NAME);\n\tvar vertexBuffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\n\t// define a square that covers the screen\n\tvar vertices = [-1.0, -1.0, 0.0,\t// bottom left\n\t\t\t\t\t 1.0, -1.0, 0.0,\t// bottom right\n\t\t\t\t\t 1.0,  1.0, 0.0,\t// top right\n\t\t\t\t\t-1.0,  1.0, 0.0];\t// top left\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\tgl.vertexAttribPointer(position, /*item size*/3, gl.FLOAT, false, 0, 0);\n\tgl.enableVertexAttribArray(position);\n\n\t// bind texture cords\n\tvar texture = gl.getAttribLocation(renderer, WebGL.TEXTURE_UNIFORM_NAME);\n\tvar texCoords = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, texCoords);\n\tvar textureCoords = [0.0, 0.0,\n\t\t\t\t\t\t 1.0, 0.0,\n\t\t\t\t\t\t 1.0, 1.0,\n\t\t\t\t\t\t 0.0, 1.0];\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);\n\tgl.vertexAttribPointer(texture, /*item size*/2, gl.FLOAT, false, 0, 0);\n\tgl.enableVertexAttribArray(texture);\n\n\t// index to vertices\n\tvar indices = gl.createBuffer();\n\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n\t// tesselate square into triangles\n\t// indeces into vertex array creating triangles, with counter-clockwise winding\n\tvar vertexIndices = [0, 1, 2,\t// bottom right triangle\n\t\t\t\t\t\t 0, 2, 3];\t// top left triangle\n\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW);\n};\n\n/* create RGBA texture of width w/4 from given texels\n   padding the width of each row to a multiple of 4, where necessary.\n\n   if texels is null, an empty texture is created.\n\n   alternative to textures?\n   http://stackoverflow.com/questions/17203508/webgl-hardware-skinning-with-a-bone-texture\n */\nWebGL.prototype.createDataTexture = function(h, w, texels){\n\n\tvar gl = this.context;\n\n\tvar PAD_TEMPLATE = [0.0, 0.0, 0.0, 0.0]; // value to pad remainder with\n\n\tvar rem = (w % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = rem == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - rem;\n\n\t// create the texture from our floats\n\tvar texture = gl.createTexture();\n\n\tgl.bindTexture(\t  gl.TEXTURE_2D, texture);\n\t/*\n\t// https://www.opengl.org/wiki/GLAPI/glPixelStore\n    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, w/4);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n\n\tsee also: https://www.opengl.org/wiki/Common_Mistakes#Creating_a_complete_texture\n\t*/\n\tif(pad == 0 || texels == null || typeof texels === 'undefined'){\n\t\t// no padding required, write directly from input array\n\t\tgl.texImage2D(\t  gl.TEXTURE_2D, 0, gl.RGBA, (w + pad) / WebGL.COMPONENTS_PER_TEXEL, h, 0,\n\t\t\t\t\t\t  gl.RGBA, gl.FLOAT, texels);\n\n\t} else {\n\t\t// must pad each row\n\n\t\t// create empty texture\n\t\tgl.texImage2D(\t  gl.TEXTURE_2D, 0, gl.RGBA, (w + pad) / WebGL.COMPONENTS_PER_TEXEL, h, 0,\n\t\t\t\t\t\t  gl.RGBA, gl.FLOAT, null);\n\n\t\tvar full_texel_row_len = w - rem,\n\t\t\tfull_row_texture_width = full_texel_row_len / WebGL.COMPONENTS_PER_TEXEL;\n\n\t\tvar row_start = 0;\n\t\tvar last_texel = new Float32Array(PAD_TEMPLATE);\n\t\tvar row, remainder;\n\n\t\t// set texture data, one row at a time, padding each row to a multiple\n\t\t// of the texel length\n\t\tfor(var i = 0; i < h; i++){\n\t\t\trow_start = i * w;\n\t\t\tfull_texel_row_end = row_start + full_texel_row_len;\n\t\t\trow = new Float32Array(texels.buffer, row_start * texels.BYTES_PER_ELEMENT, full_texel_row_len);\n\t\t\tif(full_texel_row_len > 0){\n\t\t\t\t// https://www.khronos.org/registry/webgl/specs/latest/1.0/index.html#TEXSUBIMAGE2D\n\t\t\t\tgl.texSubImage2D(gl.TEXTURE_2D,\n\t\t\t\t\t 0,\t\t\t\t\t// mip-map level\n\t\t\t\t\t 0,\t\t\t\t\t// x-offset\n\t\t\t\t\t i,\t\t\t\t\t// y-offset\n\t\t\t\t\t full_row_texture_width,\t// width\n\t\t\t\t\t 1,\t\t\t\t\t// height\n\t\t\t\t\t gl.RGBA,\t\t\t// format\n\t\t\t\t\t gl.FLOAT,\t\t\t// type\n\t\t\t\t\t row\t\t\t// data\n\t\t\t\t );\n\t\t\t}\n\n\t\t\tremainder = new Float32Array(texels.buffer, full_texel_row_end * texels.BYTES_PER_ELEMENT, rem);\n\t\t\tlast_texel.set(remainder); // copy remaining data\n\n\t\t\tgl.texSubImage2D(gl.TEXTURE_2D,\n\t\t\t\t 0,\t\t\t\t// mip-map level\n\t\t\t\t full_row_texture_width, // x-offset\n\t\t\t\t i,\t\t\t\t// y-offset\n\t\t\t\t 1,\t\t\t\t// width\n\t\t\t\t 1,\t\t\t\t// height\n\t\t\t\t gl.RGBA,\t\t// format\n\t\t\t\t gl.FLOAT,\t\t// type\n\t\t\t\t last_texel\t\t// data\n\t\t\t );\n\t\t}\n\t}\n\n\t// clamp to edge to support non-power of two textures\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n\t// don't interpolate when getting data from texture\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n\t// we're done with setup, so unbind current texture\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\treturn texture;\n};\n\n/* Create a (padded) texture suitable for reading into an array with readPixels.\n\tUNSIGNED_BYTE\n   Can be passed to bindDestinationTexture.\n\n   Returns an unsigned byte RGBA texture (other formats are not yet supported\n\ton most platforms, see WEBGL_color_buffer_float extension)\n */\nWebGL.prototype.createOutputTexture = function(h, w) {\n\tvar gl = this.context;\n\n\tvar pad = this.getPad(w);\n\n\t// create and bind texture to render to\n\tvar destTexture = gl.createTexture();\n\t//gl.activeTexture(gl.TEXTURE2);\n\tgl.bindTexture(gl.TEXTURE_2D, destTexture);\n\tgl.texImage2D(gl.TEXTURE_2D,/*level*/0, gl.RGBA, w + pad, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t// clamp to edge to support non-power of two textures\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t// don't interpolate when getting data from texture\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n\t// we're done with setup, so unbind current texture\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\treturn destTexture;\n};\n\n/* Set up output\n\n\tM - number of rows in output\n\tN - number of columns in output\n\tdstTex - texture for holding the output\n */\nWebGL.prototype.bindOutputTexture = function(M, N, texture) {\n\tvar gl = this.context;\n\n\t// set canvas and viewport size\n\tthis.canvas.height = M;\n\tthis.canvas.width = N;\n\tgl.viewport(0, 0, N, M);\n\n\t// create and bind framebuffer\n\tthis.framebuffer = this.framebuffer || gl.createFramebuffer();\n\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, /*level*/0);\n\n\n\tif( gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)\n\t\tthrow new Error(\"Bound framebuffer is not complete.\");\n\n\treturn this.framebuffer;\n};\n\nWebGL.prototype.unbindInputTexture = function(textureUnit){\n\tvar gl = this.context;\n\n\tgl.activeTexture(textureUnit);\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n};\n\n/* Read data out as unsigned bytes */\nWebGL.prototype.readData = function(M, N){\n\tvar gl = this.context;\n\n\t// create destination buffer\n\trawbuffer = new ArrayBuffer(M*N*Float32Array.BYTES_PER_ELEMENT);\n\n\t// read the result into our buffer, as bytes\n\tprod = new Uint8Array(rawbuffer);\n\tgl.readPixels(0, 0, N, M, gl.RGBA, gl.UNSIGNED_BYTE, prod);\n\n\t// return raw result bytes\n\treturn rawbuffer; // M x N\n};\n\n// how many extra elements do we need to fill up a pixel?\nWebGL.prototype.getPad = function(N){\n\n\tvar rem = (N % WebGL.COMPONENTS_PER_TEXEL),\n\t\tpad = rem == 0 ? 0 : WebGL.COMPONENTS_PER_TEXEL - rem;\n\n\treturn pad;\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}